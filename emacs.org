#+Title: Laat Emacs Config
#+PROPERTY: header-args:emacs-lisp :tangle ./init.el :mkdirp yes :results output silent
#+STARTUP: fold

* Package manager

#+begin_src emacs-lisp
  ;; NOTE: init.el is now generated from emacs.org.
  (require 'package)

  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                           ("org" . "https://orgmode.org/elpa/")
                           ("elpa" . "https://elpa.gnu.org/packages/")))

  (package-initialize)
  (unless package-archive-contents (package-refresh-contents))

  ;; Initialize use-package on non-Linux platforms
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))

  (require 'use-package)
#+end_src

** Diminish

#+begin_src emacs-lisp
  (use-package diminish :ensure t)
#+end_src

** Quelpa

#+begin_src emacs-lisp
(use-package quelpa
  :ensure t
  :defer t
  :custom
  (quelpa-update-melpa-p nil "Don't update the MELPA git repo."))

(use-package quelpa-use-package
  :init
  (setq quelpa-use-package-inhibit-loading-quelpa t)
  :ensure t)
#+end_src

* Basic UI

#+begin_src emacs-lisp
  (setq inhibit-startup-message t)

  (scroll-bar-mode -1)        ; Disable visible scrollbar
  (tool-bar-mode -1)          ; Disable the toolbar
  (tooltip-mode -1)           ; Disable tooltips
  (set-fringe-mode 10)        ; Give some breathing room
  ;;(menu-bar-mode -1)          ; Disable the menu bar

  (visual-line-mode 1)        ; Break long lines at word boundaries
#+end_src

* Basic Config

#+begin_src emacs-lisp
  (setq custom-file "~/.emacs.d/custom.el")
  (when (file-exists-p custom-file) (load custom-file))

  (setq backup-directory-alist `(("." . "~/.emacs.d/.saves")))
  (setq auto-save-file-name-transforms `((".*" "~/.emacs.d/.saves/" t)))

  (global-auto-revert-mode 1)

  (setq vc-follow-symlinks t) ;; When opening a file, always follow symlinks.
  (setq sentence-end-double-space nil) ;; This ain't a typewriter
  (setq confirm-kill-emacs 'y-or-n-p) ;; ask before dying
#+end_src

* Key Binds
** General

#+begin_src emacs-lisp
  (use-package general
    :ensure t
    :after evil
    :config
    (general-evil-setup)
    (general-create-definer laat/leader-keys
      :keymaps '(normal insert visual emacs)
      :prefix "SPC"
      :non-normal-prefix "C-c SPC")
    (general-create-definer laat/local-leader-keys
      :keymaps '(normal insert visual emacs)
      :prefix ","
      :non-normal-prefix "C-,")
    (laat/leader-keys
      "t" '(:ignore t :which-key "toggles")
      "y" '(:ignore t :which-key "helpers")
      "SPC" 'execute-extended-command))
#+end_src

** Evil

#+begin_src emacs-lisp
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)

  (use-package evil
    :ensure t
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    :config
    (evil-mode 1)

    ;; visual lines
    (define-key evil-normal-state-map
      (kbd "<remap> <evil-next-line>") 'evil-next-visual-line)
    (define-key evil-normal-state-map
      (kbd "<remap> <evil-previous-line>") 'evil-previous-visual-line)
    (define-key evil-motion-state-map
      (kbd "<remap> <evil-next-line>") 'evil-next-visual-line)
    (define-key evil-motion-state-map
      (kbd "<remap> <evil-previous-line>") 'evil-previous-visual-line)
    (setq-default evil-cross-lines t)

    ;; :q kills buffer instead of killing emacs
    (defun laat/ex-kill-buffer-and-close ()
      (interactive)
      (unless (char-equal (elt (buffer-name) 0) ?*)
        (kill-this-buffer)))

    (defun laat/ex-save-kill-buffer-and-close ()
      (interactive)
      (save-buffer)
      (kill-this-buffer))

    (evil-ex-define-cmd "q[uit]" 'laat/ex-kill-buffer-and-close)
    (evil-ex-define-cmd "wq" 'laat/ex-save-kill-buffer-and-close))

  (use-package evil-collection
    :after evil
    :ensure t
    :config
    (evil-collection-init))

  (use-package evil-surround
    :ensure t
    :after evil
    :config (global-evil-surround-mode 1))

  (use-package expand-region
    :ensure t
    :after evil
    :config
    (define-key evil-normal-state-map (kbd "+") 'er/expand-region)
    (define-key evil-normal-state-map (kbd "-") 'er/contract-region))
#+end_src

** Save like intellij

#+begin_src emacs-lisp
  (defadvice switch-to-buffer (before save-buffer-now activate)
    (when (and buffer-file-name (buffer-modified-p)) (save-buffer)))
  (defadvice other-window (before other-window-now activate)
    (when (and buffer-file-name (buffer-modified-p)) (save-buffer)))
  (defadvice windmove-up (before other-window-now activate)
    (when buffer-file-name (save-buffer)))
  (defadvice windmove-down (before other-window-now activate)
    (when buffer-file-name (save-buffer)))
  (defadvice windmove-left (before other-window-now activate)
    (when buffer-file-name (save-buffer)))
  (defadvice windmove-right (before other-window-now activate)
    (when buffer-file-name (save-buffer)))
  (add-hook 'focus-out-hook (lambda () (save-some-buffers t)))
#+end_src

** OS X

⌘-c ⌘-v addiction 😅
#+begin_src emacs-lisp
  (when (eq system-type 'darwin)
    (setq
     mac-right-option-modifier 'none
     mac-option-modifier 'meta
     mac-command-modifier 'super)
    (bind-keys ([(super a)] . mark-whole-buffer)
               ([(super c)] . kill-ring-save)
               ([(super l)] . goto-line)
               ([(super q)] . save-buffers-kill-emacs)
               ([(super s)] . save-buffer)
               ([(super v)] . yank)
               ([(super w)] . delete-frame)
               ([(super z)] . undo)))
#+end_src

* UI Configuration
** Emacs Dashboard

#+begin_src emacs-lisp
  (use-package dashboard
    :ensure t
    :config
    (dashboard-setup-startup-hook)
    :custom
    (dashboard-startup-banner "~/.emacs.d/profile.png")
    (dashboard-projects-backend 'projectile)
    (dashboard-items
     '((recents  . 5)
       (bookmarks . 5)
       (projects . 5)
       (agenda . 5)
       (registers . 5))))
#+end_src

*** exclude stuff I do not want in recents

#+begin_src emacs-lisp
  (add-to-list 'recentf-exclude "\\.emacs\\.d/elpa")
  (add-to-list 'recentf-exclude "\\.emacs\\.d/bookmarks")
  (add-to-list 'recentf-exclude "\\.emacs\\.d/recentf")
  (add-to-list 'recentf-exclude "\\.emacs\\.d/ido.last")
  (add-to-list 'recentf-exclude "\\.emacs\\.d/\\.cache/treemacs-persist")
  ;;(run-at-time nil (* 5 60) 'recentf-save-list)
#+end_src

** Color Theme

#+begin_src emacs-lisp
  (use-package doom-themes
    :ensure t
    :init
    (load-theme 'doom-one t))
#+end_src

** Mode line

#+begin_src emacs-lisp
  (use-package all-the-icons
    :ensure t)

  (use-package doom-modeline
    :ensure t
    :init (doom-modeline-mode 1)
    :custom
    ((doom-modeline-height 15)
     (doom-modeline-minor-modes t)))



  (diminish 'subword-mode)
  (diminish 'visual-line-mode)
  (diminish 'org-indent-mode)
#+end_src

  Git branch in the mode-line is often wrong and making it always show current branch has performance issues. Disabling it, because wrong information is worse than incorrect information.

#+begin_src emacs-lisp
  (setq-default mode-line-format
                (delete '(vc-mode vc-mode) mode-line-format))
#+end_src

** Treemacs

#+begin_src emacs-lisp
  (use-package treemacs
    :ensure t)

  (use-package treemacs-evil
    :after evil
    :ensure t)

  (use-package treemacs-projectile
    :after projectile
    :ensure t)

  (use-package treemacs-magit
    :after magit
    :ensure t)
#+end_src

** Helpful
#+begin_src emacs-lisp
  (use-package helpful
    :ensure t
    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
    :bind
    ([remap describe-function] . counsel-describe-function)
    ([remap describe-command] . helpful-command)
    ([remap describe-variable] . counsel-describe-variable)
    ([remap describe-key] . helpful-key))
#+end_src

** Which Key

#+begin_src emacs-lisp
  (use-package which-key
    :ensure t
    :init (which-key-mode)
    :diminish
    :config
    (setq which-key-idle-delay 1))
#+end_src

** Ivy

#+begin_src emacs-lisp
  (use-package ivy
    :ensure t
    :diminish
    :bind (("C-s" . swiper)
           :map ivy-minibuffer-map
           ("TAB" . ivy-alt-done)
           ("C-l" . ivy-alt-done)
           ("C-j" . ivy-next-line)
           ("C-k" . ivy-previous-line)
           :map ivy-switch-buffer-map
           ("C-k" . ivy-previous-line)
           ("C-l" . ivy-done)
           ("C-d" . ivy-switch-buffer-kill)
           :map ivy-reverse-i-search-map
           ("C-k" . ivy-previous-line)
           ("C-d" . ivy-reverse-i-search-kill))
    :config
    (ivy-mode 1))

  (use-package ivy-rich
    :ensure t
    :init
    (ivy-rich-mode 1))

  (use-package counsel
    :ensure t
    :diminish
    :bind (("C-M-j" . 'counsel-switch-buffer)
           :map minibuffer-local-map
           ("C-r" . 'counsel-minibuffer-history))
    :config
    (counsel-mode 1)
    ;; remove the ^ in M-x search
    (setcdr (assoc 'counsel-M-x ivy-initial-inputs-alist) ""))
#+end_src

** Drag Stuff

#+begin_src emacs-lisp
  (use-package drag-stuff
    :ensure t
    :diminish
    :custom
    (drag-stuff-except-modes '(org-mode))
    :config
    (drag-stuff-define-keys)
    (drag-stuff-global-mode 1))
#+end_src

** Reveal in X

#+begin_src emacs-lisp
  (use-package reveal-in-osx-finder
    :ensure t)
#+end_src

** Bookmarks

#+begin_src emacs-lisp
  (setq bookmark-save-flag 1) ;; save bookmarks on edit

  (laat/leader-keys
    "r" '(:ignore t :which-key "bookmarks")
    "rm" '(bookmark-set :which-key "set bookmark")
    "rg" '(bookmark-jump :which-key "jump to bookmark")
    "rl" '(list-bookmarks :which-key "list bookmarks")
    "rd" '(bookmark-delete :which-key "delete bookmark"))
#+end_src

** Calendar

#+begin_src emacs-lisp
  (setq
   calendar-latitude  60.0
   calendar-longitude  10.7
   calendar-location-name  "Oslo")
#+end_src

** Spellcheck
*** Norwegian

Emacs does not know that there are multiple written Norwegian languages.

#+begin_src emacs-lisp
  (delete '("norsk" "nn_NO") ispell-dicts-name2locale-equivs-alist)
  (add-to-list 'ispell-dicts-name2locale-equivs-alist '("norsk-bokmål" "nb_NO"))
  (add-to-list 'ispell-dicts-name2locale-equivs-alist '("norsk-nynorsk" "nn_NO"))
#+end_src

*** OSX hunspell

#+begin_src shell :tangle no
  brew install hunspell
  mkdir -p "$HOME/Library/Spelling" # the directory for *.aff and *.dic
#+end_src

It is important to have the spellcheck files for your LANG. I've tried to make it work without it, but cannot for the life of me get it to work.

#+begin_src emacs-lisp :tangle no :results value replace
  (getenv "LANG")
#+end_src

#+RESULTS:
: en_NO.UTF-8

It's sometimes weird like =en_NO.UTF-8= so set it to something you have downloaded.

#+begin_src emacs-lisp
  (setenv "LANG" "en_US.UTF-8")
#+end_src

#+begin_src emacs-lisp
  (setq ispell-program-name (executable-find "hunspell"))
#+end_src

*** Hunspell dictionaries
**** nb_NO

#+begin_src sh :tangle no
  wget -O nb_NO.aff https://cgit.freedesktop.org/libreoffice/dictionaries/plain/no/nb_NO.aff
  wget -O nb_NO.dic https://cgit.freedesktop.org/libreoffice/dictionaries/plain/no/nb_NO.dic
#+end_src

**** nn_NO

#+begin_src sh :tangle no
  wget -O nn_NO.aff https://cgit.freedesktop.org/libreoffice/dictionaries/plain/no/nn_NO.aff
  wget -O nn_NO.dic https://cgit.freedesktop.org/libreoffice/dictionaries/plain/no/nn_NO.dic
#+end_src

**** en_GB
#+begin_src sh :tangle no
  wget -O en_GB.aff https://cgit.freedesktop.org/libreoffice/dictionaries/plain/en/en_GB.aff
  wget -O en_GB.dic https://cgit.freedesktop.org/libreoffice/dictionaries/plain/en/en_GB.dic
#+end_src

**** en_US

Download en_US from [[http://wordlist.aspell.net/dicts/][aspell.net]] and extract it to ~~/Library/Spelling~

*** Org code blocks

#+begin_src emacs-lisp
  ;; ignore orgmode blocks
  (add-to-list 'ispell-skip-region-alist '(":\\(PROPERTIES\\|LOGBOOK\\):" . ":END:"))
  (add-to-list 'ispell-skip-region-alist '("#\\+BEGIN_SRC" . "#\\+END_SRC"))
  (add-to-list 'ispell-skip-region-alist '("#\\+BEGIN_EXAMPLE" . "#\\+END_EXAMPLE"))
#+end_src

*** Flyspell

Norwegianz

#+begin_src emacs-lisp
  (use-package flyspell
    :diminish
    :config
    (add-hook 'org-mode-hook 'flyspell-mode)
    (setq flyspell-issue-welcome-flag nil
          ;; Significantly speeds up flyspell, which would otherwise print
          ;; messages for every word when checking the entire buffer
          flyspell-issue-message-flag nil))

  (use-package flyspell-correct
    :ensure t
    :after flyspell
    :general
    (general-define-key
     :states '(normal visual)
     "z=" 'flyspell-correct-at-point))

  ;; M-o opens extra actions like save to local directory
  (use-package flyspell-correct-ivy
    :ensure t
    :after flyspell-correct)

#+end_src

* Development
** Basic
*** Line numbers

#+begin_src emacs-lisp
  (add-hook 'prog-mode-hook 'display-line-numbers-mode)
#+end_src

*** Sub words
Treat =CamelCaseSubWords= as separate words in every programming
mode.

#+begin_src emacs-lisp
(add-hook 'prog-mode-hook 'subword-mode)
#+end_src

** Projects

Set this to the folder where you keep your Git repos!

~M-x customize-option projectile-project-search-path~

#+begin_src emacs-lisp
  (use-package projectile
    :ensure t
    :diminish
    :config (projectile-mode)
    :custom
    (projectile-completion-system 'ivy)
    (projectile-switch-project-action #'projectile-dired)
    :general
    (laat/leader-keys
      "'" 'projectile-run-vterm
      "p" 'projectile-command-map)
    :bind-keymap
    ("C-c p" . projectile-command-map))

    (use-package counsel-projectile
      :ensure t
      :config (counsel-projectile-mode))
#+end_src

** Compilation

[[https://stackoverflow.com/questions/13397737/ansi-coloring-in-compilation-mode][ANSI Coloring in Compilation Mode]]
#+begin_src emacs-lisp
  (ignore-errors
    (require 'ansi-color)
    (defun my-colorize-compilation-buffer ()
      (when (eq major-mode 'compilation-mode)
        (ansi-color-apply-on-region compilation-filter-start (point-max))))
    (add-hook 'compilation-filter-hook 'my-colorize-compilation-buffer))
#+end_src

** Completion

#+begin_src emacs-lisp
  (use-package company
    :ensure t
    :diminish
    :bind (("C-SPC" . company-complete-common)
           :map prog-mode-map
           ("<tab>" . company-indent-or-complete-common))
    :config
    (global-company-mode))

  (use-package company-box
    :ensure t
    :diminish
    :hook (company-mode . company-box-mode))
#+end_src

** Syntax Checking

#+begin_src emacs-lisp
  (use-package flycheck
    :ensure t
    :diminish
    :init (global-flycheck-mode))
#+end_src

** Languages
*** F#

#+begin_src emacs-lisp
  (use-package fsharp-mode
    :defer t
    :ensure t)
#+end_src

*** Emacs Lisp

#+begin_src emacs-lisp
  (use-package aggressive-indent
    :ensure t
    :diminish
    :commands aggressive-indent-mode
    :init
    (add-hook 'emacs-lisp-mode-hook #'aggressive-indent-mode))
#+end_src

*** JSON

#+begin_src emacs-lisp
  (use-package json-mode
    :ensure t)
  (use-package json-snatcher
    :ensure t)
  (use-package counsel-jq
    :ensure t
    :after counsel)
#+end_src

*** YAML

#+begin_src emacs-lisp
  (use-package yaml-mode
    :ensure t)
#+end_src

*** Markdown

#+begin_src emacs-lisp
  (use-package markdown-mode
    :ensure t
    :commands (markdown-mode gfm-mode)
    :mode (("README\\.md\\'" . gfm-mode)
           ("\\.md\\'" . markdown-mode)
           ("\\.markdown\\'" . markdown-mode))
    :init (setq markdown-command "multimarkdown"))
#+end_src

*** TypeScript
minimal

#+begin_src emacs-lisp
(use-package typescript-mode
  :ensure t
  :defer t)
#+end_src

** White space

#+begin_src emacs-lisp
  (use-package whitespace-cleanup-mode
    :ensure t
    :diminish whitespace-cleanup-mode
    :commands whitespace-cleanup-mode
    :init
    (add-hook 'prog-mode-hook 'whitespace-cleanup-mode))

  (setq-default tab-width 2)
  (setq-default indent-tabs-mode nil)

  (add-hook 'prog-mode-hook
            (lambda () (setq show-trailing-whitespace t)))

  (use-package whitespace
    :ensure t
    :diminish
    :init
    (add-hook 'prog-mode-hook #'whitespace-mode)
    (add-hook 'before-save-hook #'whitespace-cleanup)
    :config
    (setq whitespace-line-column nil)
    (setq whitespace-global-modes '(not org-mode))
    (setq
     whitespace-style
     '(face
       tabs
       spaces
       trailing
       ;; lines
       ;; space-before-tab
       ;; newline
       indentation
       ;; empty
       ;; space-after-tab
       ;; space-mark
       tab-mark
       ;; newline-mark
       )))

  (use-package highlight-indent-guides
    :ensure t
    :diminish highlight-indent-guides-mode
    :hook (prog-mode . highlight-indent-guides-mode)
    :config
    (setq highlight-indent-guides-method 'bitmap
          highlight-indent-guides-bitmap-function 'highlight-indent-guides--bitmap-line
          highlight-indent-guides-responsive 'top))
#+end_src

** Unicode Trolls

#+begin_src emacs-lisp
  (use-package unicode-troll-stopper
    :ensure t
    :diminish unicode-troll-stopper-mode
    :commands unicode-troll-stopper-mode
    :init
    (add-hook 'prog-mode-hook 'unicode-troll-stopper-mode))
#+end_src

** Magit

#+begin_src emacs-lisp
  (use-package magit
    :ensure t
    :general
    (laat/leader-keys
      "g" '(:ignore t :which-key "git")
      "gs" '(magit-status :which-key "git status")))
  (use-package evil-magit
    :ensure t
    :after (magit evil))
  (use-package diff-hl
    :ensure t
    :hook (dired-mode . diff-hl-dired-mode-unless-remote)
    :hook (magit-post-refresh . diff-hl-magit-post-refresh)
    :config
    ;; use margin instead of fringe
    (diff-hl-margin-mode))
#+end_src

*** Forge

Need GPG. [[https://gpgtools.org/][OSX toolkit]]

#+begin_src emacs-lisp
  (use-package forge
    :ensure t
    :after magit
    :general
    (laat/leader-keys
      "gf" '(forge-dispatch :which-key "forge")))
#+end_src

*** Orgit

#+begin_src emacs-lisp
  (use-package orgit
    :ensure t)
#+end_src

[[orgit:/Users/n637831/git/psapi-typescript-contracts][psapi-typescript-contracts]]
* Org

#+begin_src emacs-lisp
  (use-package org
    :ensure org-plus-contrib
    :hook
    ((org-mode . visual-line-mode)
     (org-mode . org-indent-mode))
    :general
    (laat/leader-keys
      "c" '(org-capture :which-key "capture"))
    :custom
    (org-image-actual-width nil "allows #+ATTR_ORG: :width 100")
    (org-ellipsis " ▾" "a pretty ellipsis")
    (org-capture-templates
     `(("j" "Journal" entry (file+olp+datetree "~/Dropbox/notes/notes.org")
        "\n* %<%I:%M %p> - Journal :journal:\n\n%?\n\n"
        :clock-in :clock-resume
        :empty-lines 1)
       ("s" "Simple" entry (file+headline "~/Dropbox/notes/notes.org" "Captured")
        "\n** %?\n\n\n\n"
        :empty-lines 1)
       )))

  (use-package evil-org
    :ensure t
    :diminish
    :after org
    :hook
    ((org-mode . evil-org-mode)
     (evil-org-mode . (lambda ()
                        (evil-org-set-key-theme)))))
#+end_src

** org-protocol

#+begin_src emacs-lisp
  (use-package org-protocol :ensure nil)
#+end_src

** languagetool

#+begin_src emacs-lisp
  (use-package langtool
    :ensure t
    :init
    (setq langtool-default-language "en-US")
    :config
    (setq langtool-bin "/usr/local/bin/languagetool"))
#+end_src

On OSX:
#+begin_src shell :tangle no
brew install languagetool
#+end_src

** writegood

#+begin_src emacs-lisp
  (use-package writegood-mode
    :ensure t
    ;; :hook (org-mode markdown-mode rst-mode asciidoc-mode latex-mode)
    :general
    (laat/leader-keys
      "yg" '(:ignore t :which-key "writegood")
      "ygg" 'writegood-mode
      "ygl" 'writegood-grade-level
      "yge" 'writegood-reading-ease))
#+end_src

** org-download

#+begin_src emacs-lisp
    (use-package org-download
      :ensure t
      :hook (dirred-mode . org-download-enable)
      :general
      (laat/local-leader-keys
        :states 'normal
        :keymaps 'org-mode-map
        "y" '(:ignore t :which-key "yank")
        "yi" '(org-download-clipboard :which-key "clipboard image")))
#+end_src

On OSX use before calling =org-download-clipboard=
#+begin_src shell :tangle no
  brew install pngpaste
#+end_src

** Nice bullets

#+begin_src emacs-lisp
  (use-package org-bullets
    :ensure t
    :after org
    :hook (org-mode . org-bullets-mode)
    :custom
    (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))
#+end_src

** Visual center

#+begin_src emacs-lisp
  (defun laat/org-mode-visual-fill ()
    (visual-fill-column-mode 1))
  (use-package visual-fill-column
    :ensure t
    :custom
    (visual-fill-column-width 100)
    (visual-fill-column-center-text t)
    :hook (org-mode . laat/org-mode-visual-fill))
#+end_src

** <lang templates

#+begin_src emacs-lisp
  (require 'org-tempo)

  (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
  (add-to-list 'org-structure-template-alist '("me" . "src mermaid"))
  (add-to-list 'org-structure-template-alist '("http" . "src http"))
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist '("py" . "src python"))
#+end_src

** Babel

*** Emacs lisp

#+begin_src emacs-lisp
  (defun disable-fylcheck-in-org-src-block ()
    (setq-local flycheck-disabled-checkers '(emacs-lisp-checkdoc)))

  (add-hook 'org-src-mode-hook 'disable-fylcheck-in-org-src-block)
#+end_src

*** Async code blocks

=:async= header args

#+begin_src emacs-lisp
  (use-package ob-async
    :ensure t
    :custom
    (ob-async-no-async-languages-alist '("ipython")))
#+end_src

this does not block with the =:async= header
#+begin_src shell :tangle no :async
  sleep 3s && echo "Done!"
#+end_src

*** typescript

#+begin_src emacs-lisp
  (use-package ob-typescript
    :ensure t
    :config
    (add-to-list 'org-babel-load-languages '(typescript . t)))
#+end_src

*** HTTP

#+begin_src emacs-lisp
  (use-package ob-http
    :ensure t
    :after org
    :config
    (add-to-list 'org-babel-load-languages '(http . t)))
#+end_src

#+begin_src http :pretty :wrap src json :tangle no
  GET https://httpbin.org/get
  Accept: application/json
#+End_src

*** REST

#+begin_src emacs-lisp

  (use-package restclient
    :ensure t)
  (use-package ob-restclient
    :ensure t
    :after org
    :config
    (add-to-list 'org-babel-load-languages '(restclient . t)))
#+end_src

#+begin_src restclient :tangle no
  GET https://httpbin.org/get
  Accept: application/json
#+end_src

*** latex-as-png

#+begin_src emacs-lisp
  (use-package ob-latex-as-png
    :ensure t)

  ;; Always redisplay images after C-c C-c (org-ctrl-c-ctrl-c)
  (add-hook 'org-babel-after-execute-hook 'org-redisplay-inline-images)
#+end_src

*** mermaid diagrams
[[https://mermaid-js.github.io/mermaid/#/][mermaid]] can draw nice diagrams inline in emacs

=C-c C-x C-v org-toggle-inline-images=

#+begin_src emacs-lisp
  (use-package ob-mermaid
    :ensure t
    :after org
    :config
    (add-to-list 'org-babel-load-languages '(mermaid . t)))
#+end_src

#+begin_src mermaid :file mermaid.png :tangle no
sequenceDiagram
    A-->B: Works!
#+end_src

*** fsharp

#+begin_src emacs-lisp
  (use-package ob-fsharp
    :ensure t
    :after org
    :config
    (add-to-list 'org-babel-load-languages '(fsharp . t)))
#+end_src

#+begin_src fsharp :tangle no
  let x = "hello"
  sprintf "%s world" x
#+end_src

#+begin_src emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((shell . t)
     (js . t)
     (emacs-lisp . t)
     (fsharp . t)
     (mermaid . t)
     (restclient . t)
     (http . t)
     (typescript . t)))
#+end_src

** org-yt

#+begin_src emacs-lisp :tangle no
  (require 'org-yt)
#+end_src

** TODO roam

I cannot get it to work, needs investigation

#+begin_src emacs-lisp :tangle no
  (use-package org-roam
    :ensure t
    :diminish
    :hook
    (after-init . org-roam-mode)
    :custom
    (org-roam-directory "~/Dropbox/notes/roam")
    :bind (:map org-roam-mode-map
                (("C-c n l" . org-roam)
                 ("C-c n f" . org-roam-find-file)
                 ("C-c n g" . org-roam-graph))
                :map org-mode-map
                (("C-c n i" . org-roam-insert))
                (("C-c n I" . org-roam-insert-immediate))))
#+end_src

** TODO roam-server
#+begin_src emacs-lisp :tangle no
  (use-package org-roam-server
    :ensure t
    :disabled t
    :config
    (setq org-roam-server-host "127.0.0.1"
          org-roam-server-port 8080
          org-roam-server-authenticate nil
          org-roam-server-export-inline-images t
          org-roam-server-serve-files nil
          org-roam-server-served-file-extensions '("pdf" "mp4" "ogv")
          org-roam-server-network-poll t
          org-roam-server-network-arrows nil
          org-roam-server-network-label-truncate t
          org-roam-server-network-label-truncate-length 60
          org-roam-server-network-label-wrap-length 20))
#+end_src
** TODO org-sidebar
too advanced for me yet

#+begin_src emacs-lisp :tangle no
  (use-package org-sidebar
    :disabled t
    :ensure t)
#+end_src
** Auto-Tangle init.el

#+begin_src emacs-lisp
  (defun laat/org-babel-tangle-config ()
    (when (string-equal (buffer-file-name)
                        (expand-file-name "~/.emacs.d/emacs.org"))
      ;; Dynamic scoping to the rescue
      (let ((org-confirm-babel-evaluate nil))
        (org-babel-tangle))))

  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'laat/org-babel-tangle-config)))
#+end_src

* Pandoc

#+begin_src emacs-lisp
  (use-package pandoc-mode
    :ensure t
    :config
    (add-hook 'pandoc-mode-hook 'pandoc-load-default-settings))

  ;; creates a long export-dispatch
  ;; SPC and DELETE to scroll up and down
  ;; C-n and C-P to scroll up and down
  (use-package ox-pandoc
    :ensure t
    :after or g)
#+end_src

* File Management

#+begin_src emacs-lisp
  (use-package all-the-icons-dired
    :ensure t
    :hook (dired-mode . all-the-icons-dired-mode))
#+end_src

* Terminals
** vterm

#+begin_src emacs-lisp
  (use-package vterm
    :ensure t)
#+end_src

* Future Customization?
** [[https://github.com/abo-abo/hydra][hydra]]
** [[https://github.com/raxod502/straight.el][staight.el]]
** [[https://github.com/gilbertw1/better-jumper][better-jumper]]
** [[https://github.com/jscheid/dtrt-indent][dtrt-indent]]
** [[https://github.com/hlissner/emacs-so-long/blob/master/so-long.el][so-long.el]]
** [[https://github.com/hlissner/ws-butler][ws-butler]]
** flycheck
** flycheck-popup-tip
** [[https://github.com/noctuid/link-hint.el][link-hint.el]]
** [[https://github.com/takaxp/org-tree-slide][org-tree-slide]]
** [[https://gitlab.com/oer/org-re-reveal][org-re-reveal]]
** [[https://github.com/jkitchin/ox-clip][ox-clip]]
** [[https://github.com/jkitchin/scimax/blob/master/ox-word.el][ox-word]]
** [[https://ox-hugo.scripter.co/][ox-hugo]]
** [[https://github.com/aspiers/orgmode/blob/master/contrib/lisp/ox-confluence.el][ox-confluence]]
** [[https://orgmode.org/worg/exporters/beamer/ox-beamer.html][ox-beamer]]
** [[https://github.com/camdez/goto-last-change.el][goto-last-change.el]]
** [[https://github.com/benma/visual-regexp-steroids.el/][visual-regexp-steroids.el]]
** [[https://github.com/jorgenschaefer/typoel/blob/master/typo.el][typo.el]]
** [[https://www.emacswiki.org/emacs/ParEdit][ParEdit]]
** [[https://github.com/DanielDe/org-web][org-web]]
** [[https://github.com/alphapapa/org-protocol-capture-html][org-protocol-capture-html]]
** [[https://github.com/emacsorphanage/terraform-mode][terraform-mode]]
** [[https://github.com/chrisbarrett/kubernetes-el][kubernetes-el]]
** [[https://github.com/iqbalansari/emacs-emojify][emacs-emojify]]
** [[https://github.com/ffevotte/script2svg][script2svg]]
** [[https://github.com/prettier/prettier-emacs][prettier]]
** [[https://polymode.github.io/][polymode]]
** [[https://github.com/abo-abo/avy][avy]]
** [[https://github.com/redguardtoo/evil-nerd-commenter][evil-nerd-commenter]]
** [[https://github.com/Fanael/highlight-numbers][highlight-numbers]]
** [[https://github.com/joewreschnig/auto-minor-mode][auto-minor-mode]]
** [[https://github.com/emacsmirror/gcmh][gcmh]]
** [[https://github.com/dakrone/es-mode][es-mode]]
** [[https://github.com/darksmile/cheatsheet][cheatsheet]]
** https://github.com/tumashu/ivy-posframe
** https://github.com/raxod502/selectrum
** https://github.com/conao3/leaf.el
** http://git.savannah.gnu.org/cgit/emacs.git/tree/lisp/uniquify.el?h=emacs-27
** https://salvatore.denaro.nyc/2020/08/capturing-text-from-any-mac-application.html
** https://github.com/rougier/elegant-emacs
** https://github.com/TonCherAmi/org-padding
** https://github.com/TonCherAmi/org-starless
** https://github.com/cadadr/elisp/blob/devel/org-variable-pitch.el
** https://chee.xo.snoot.club/notebook/publish.html
** https://github.com/magit/git-modes
** https://github.com/john2x/jenkinsfile-mode
** https://jherrlin.github.io/posts/learn-awk/
** https://github.com/magit/orgit-forge
** https://github.com/hrs/sensible-defaults.el
** https://gitlab.com/matsievskiysv/math-preview
** https://melpa.org/#/ob-napkin
** https://github.com/nikclayton/ob-html-chrome
** https://github.com/alphapapa/burly.el
** https://orgmode.org/worg/org-tutorials/org-protocol-custom-handler.html
** OS X
- [[https://github.com/purcell/exec-path-from-shell][exec-path-from-shell]]
- [[https://github.com/raghavgautam/osx-lib/blob/master/osx-lib.el][osx-lib.el]]
- [[https://github.com/emacsorphanage/osx-trash/][osx-trash]]
- [[https://github.com/pekingduck/launchctl-el][launchctl-el]]
- [[https://github.com/kaz-yos/reveal-in-osx-finder][reveal-in-osx-finder]]


