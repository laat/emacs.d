#+Title: Laat Emacs Config
#+PROPERTY: header-args:emacs-lisp :tangle ./init.el :mkdirp yes :results output silent
#+STARTUP: fold

#+html: <div align="center">
[[file:profile.png]]
#+html: </div>


* Early Init
:PROPERTIES:
:header-args:emacs-lisp: :tangle ./early-init.el :mkdirp yes :results output silent
:END:

No startup message.

#+begin_src emacs-lisp
  (setq inhibit-startup-message t)
#+end_src

Disable visible scrollbar.

#+begin_src emacs-lisp
  (scroll-bar-mode -1)
#+end_src

Disable the toolbar on every thing else

#+begin_src emacs-lisp
  (tool-bar-mode -1)
#+end_src

Disable tooltips

#+begin_src emacs-lisp
  (tooltip-mode -1)
#+end_src

Give some breathing room in the fringes

#+begin_src emacs-lisp
  (set-fringe-mode 10)
#+end_src

Disable the menu bar.

#+begin_src emacs-lisp
  (when (not (eq system-type 'darwin))
    (menu-bar-mode -1))
#+end_src


Default frame size

#+begin_src emacs-lisp
  ;;; Nice size for the default window
  (when (eq system-type 'darwin)
    (add-to-list 'default-frame-alist '(width . 140))
    (add-to-list 'default-frame-alist '(height . 120)))
#+end_src

Frame title
#+begin_src emacs-lisp
  (setq frame-title-format "%b")
#+end_src

* Package manager
** Initialize package manager

#+begin_src emacs-lisp
  (require 'package)
  (setq package-archives
        '(("melpa" . "https://melpa.org/packages/")
          ("gnu" . "https://elpa.gnu.org/packages/")
          ("nongnu" . "https://elpa.nongnu.org/nongnu/")))
  (setq package-enable-at-startup nil)
  (package-initialize)
#+end_src

** Bootstrap use-package

#+begin_src emacs-lisp
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))
#+end_src

** System Packages

#+begin_src emacs-lisp
  (use-package system-packages
    :ensure t
    :defer t)
#+end_src


** Quelpa

#+begin_src emacs-lisp
  (use-package quelpa
    :ensure t
    :defer t
    :config
    (when (eq system-type 'darwin)
      ;; brew install gnu-tar
      (setq-default quelpa-build-tar-executable "/opt/homebrew/bin/gtar")))

  (use-package quelpa-use-package
    :ensure t
    :init
    (setq quelpa-use-package-inhibit-loading-quelpa t))
#+end_src

** User local packages

Create local packages in =~/emacs.d/lisp/=

#+begin_src emacs-lisp
  (add-to-list 'load-path (expand-file-name "lisp" user-emacs-directory))
#+end_src

* Garbage Collection

#+begin_src emacs-lisp
  (use-package gcmh
    :ensure t
    :diminish
    :init
    (gcmh-mode 1))
#+end_src

* Basic Config

Don't delete any backups.
#+BEGIN_SRC emacs-lisp
  (setq delete-old-versions -1)
#+END_SRC

Unconditionally make numeric backups for files.

#+BEGIN_SRC emacs-lisp
  (setq version-control t)
#+END_SRC

Backup files even if they're under version control.

#+BEGIN_SRC emacs-lisp
  (setq vc-make-backup-files t)
#+END_SRC

Place automatically saved files in a single directory.

#+BEGIN_SRC emacs-lisp
  (setq auto-save-file-name-transforms
    `((".*" ,(concat user-emacs-directory "auto-save-list/") t)))
#+END_SRC

Place all backups in a single directory.

#+BEGIN_SRC emacs-lisp
  (setq backup-directory-alist
    `((".*" . ,(concat user-emacs-directory "backups"))))
#+END_SRC

Save the minibuffer history between sessions. Also save the kill-ring and search rings.

#+BEGIN_SRC emacs-lisp
  (require 'savehist)
  (savehist-mode 1)
  (setq history-length 10000)
  (setq savehist-save-minibuffer-history 1)
  (setq savehist-additional-variables
        '(kill-ring
          search-ring
          regexp-search-ring
          register-alist))
#+END_SRC

Don't create lock files.

#+BEGIN_SRC emacs-lisp
  (setq create-lockfiles nil)
#+END_SRC

Put all customizations into a separate file.

#+begin_src emacs-lisp
  (setq custom-file "~/.emacs.d/custom.el")
  (when (file-exists-p custom-file) (load custom-file))
#+end_src

When opening a file, always follow symlinks.

#+begin_src emacs-lisp
  (setq vc-follow-symlinks t)
#+end_src

Ask before terminating.

#+begin_src emacs-lisp
  ;; (setq confirm-kill-emacs 'y-or-n-p)
#+end_src

Not a typewriter.

#+begin_src emacs-lisp
  (setq sentence-end-double-space nil)
#+end_src

Auto revert buffers if they are changed on disk.

#+begin_src emacs-lisp
  (global-auto-revert-mode 1)
#+end_src

Performance mitigations for files with long lines.

#+begin_src emacs-lisp
  (global-so-long-mode 1)
#+end_src

Git branch in the mode-line is often wrong and making it always show current branch has performance issues. Disabling it, because wrong information is worse than incorrect information.

#+begin_src emacs-lisp
  (setq-default mode-line-format (delete '(vc-mode vc-mode) mode-line-format))
#+end_src

Too many characters to type "yes". y is OK.

#+begin_src emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
#+end_src

Break long lines at word boundaries.

#+begin_src emacs-lisp
  (global-visual-line-mode 1)
#+end_src

Don't add a string to kill-ring if it duplicates the last one.

#+begin_src emacs-lisp
  (setq kill-do-not-save-duplicates t)
#+end_src

Return to last cursor position when opening a file.

#+begin_src emacs-lisp
  (save-place-mode +1)
#+end_src

Fix path
#+begin_src emacs-lisp
  (use-package exec-path-from-shell
    :ensure t
    :if (memq window-system '(mac ns darwin))
    :init
    (setq
     ;; exec-path-from-shell-debug t
     ;; bash has the correct path (on my system) and is faster
     exec-path-from-shell-shell-name "bash"
     ;; removed -i because -l has correct path on my system
     exec-path-from-shell-arguments '("-l"))
    :config (exec-path-from-shell-initialize))
#+end_src
* Key Binds
** General

#+begin_src emacs-lisp
  (use-package general
    :ensure t
    :config
    (general-evil-setup)
    (general-create-definer laat/leader-keys
      :keymaps '(normal insert visual emacs)
      :prefix "SPC"
      :global-prefix "M-SPC")
    (general-create-definer laat/local-leader-keys
      :keymaps '(normal insert visual emacs)
      :prefix ","
      :non-normal-prefix "C-,")
    (laat/leader-keys
      "t" '(:ignore t :which-key "toggles")
      "f" '(:ignore t :which-key "quick access")
      "SPC" 'execute-extended-command)
    (laat/leader-keys
      "r" '(:ignore t :which-key "bookmarks")
      "rf" '(counsel-recentf :which-key "recent files")
      "fr" '(counsel-recentf :which-key "recent files")
      "rm" '(bookmark-set :which-key "set bookmark")
      "rg" '(bookmark-jump :which-key "jump to bookmark")
      "rl" '(list-bookmarks :which-key "list bookmarks")
      "rd" '(bookmark-delete :which-key "delete bookmark")))
#+end_src

** Evil

#+begin_src emacs-lisp
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)


  (use-package undo-fu
    :ensure t)

  (use-package evil
    :ensure t
    :defines
    evil-inner-text-objects-map
    evil-insert-state-map
    evil-motion-state-map
    evil-normal-state-map
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (setq evil-collection-want-unimpaired-p nil)
    :hook
    (after-init . evil-mode)
    :general
    (general-define-key
     :keymaps '(insert normal)
     "<s-backspace>" 'evil-delete-backward-word)
    :config
    (evil-mode 1)
    (evil-set-undo-system 'undo-fu)
    ;; C-w d deletes window
    (define-key evil-window-map "d" 'delete-window)

    ;; visual lines
    (define-key evil-normal-state-map
                (kbd "<remap> <evil-next-line>") 'evil-next-visual-line)
    (define-key evil-normal-state-map
                (kbd "<remap> <evil-previous-line>") 'evil-previous-visual-line)
    (define-key evil-motion-state-map
                (kbd "<remap> <evil-next-line>") 'evil-next-visual-line)
    (define-key evil-motion-state-map
                (kbd "<remap> <evil-previous-line>") 'evil-previous-visual-line)

    (setq-default evil-cross-lines t)

    ;; :q kills buffer instead of killing emacs
    (defun laat/ex-kill-buffer-and-close ()
      (interactive)
      (unless (char-equal (elt (buffer-name) 0) ?*)
        (kill-this-buffer)))

    (defun laat/ex-save-kill-buffer-and-close ()
      (interactive)
      (save-buffer)
      (kill-this-buffer))
    (evil-ex-define-cmd "q[uit]" 'laat/ex-kill-buffer-and-close)
    (evil-ex-define-cmd "wq" 'laat/ex-save-kill-buffer-and-close))


  (use-package evil-collection
    :ensure t
    :after evil
    :config
    (delete 'vterm evil-collection-mode-list)
    (evil-collection-init))

  (use-package evil-matchit
    :ensure t
    :hook (evil-mode . global-evil-matchit-mode))

  (use-package evil-visualstar
    :ensure t
    :hook (evil-mode . global-evil-visualstar-mode)
    :custom (evil-visualstar/persistent t))

  (use-package evil-surround
    :ensure t
    :hook (evil-mode . global-evil-surround-mode ))

  (use-package evil-numbers
    :ensure t
    :after evil
    :general
    (:states 'normal
             "C-a" 'evil-numbers/inc-at-pt
             "C-S-a" 'evil-numbers/dec-at-pt))

  (use-package expand-region
    :ensure t
    :after evil
    :general
    (:states 'normal
             "+" 'er/expand-region
             "-" 'er/contract-region))

  (use-package evil-lion
    :ensure t
    :hook (evil-mode . evil-lion-mode))


  (use-package evil-multiedit
    :ensure t
    :general
    (:states '(normal visual)
             "s-d" 'evil-multiedit-match-and-next
             "s-D" 'evil-multiedit-match-and-prev))

  (use-package evil-string-inflection
    :ensure t
    :general
    (:states 'normal
             "g+" 'evil_operator_string_inflection))
#+end_src

** Hydra

#+begin_src emacs-lisp
  (use-package hydra
    :after evil
    :defer t
    :ensure t)

  (use-package use-package-hydra
    :ensure t)
#+end_src

** Save like intellij

#+begin_src emacs-lisp
  (defadvice find-file (before save-buffer-now activate)
    (when (and buffer-file-name (buffer-modified-p)) (save-buffer)))
  (defadvice switch-to-buffer (before save-buffer-now activate)
    (when (and buffer-file-name (buffer-modified-p)) (save-buffer)))
  (defadvice other-window (before other-window-now activate)
    (when (and buffer-file-name (buffer-modified-p)) (save-buffer)))
  (defadvice windmove-up (before other-window-now activate)
    (when buffer-file-name (save-buffer)))
  (defadvice windmove-down (before other-window-now activate)
    (when buffer-file-name (save-buffer)))
  (defadvice windmove-left (before other-window-now activate)
    (when buffer-file-name (save-buffer)))
  (defadvice windmove-right (before other-window-now activate)
    (when buffer-file-name (save-buffer)))
  (add-hook 'focus-out-hook (lambda () (save-some-buffers t)))
#+end_src

** OS X

⌘-c ⌘-v addiction 😅
#+begin_src emacs-lisp
  (defun laat/text-scale-zero ()
    (interactive)
    (text-scale-set 0))

  (when (eq system-type 'darwin)
    (setq
     mac-right-option-modifier 'none
     mac-option-modifier 'meta
     mac-command-modifier 'super)
    (with-eval-after-load 'evil
      (define-key evil-insert-state-map (kbd "s-v") 'yank))
    (bind-keys
     ((kbd "s-a") . mark-whole-buffer)
     ((kbd "s-c") . kill-ring-save)
     ((kbd "s-l") . goto-line)
     ((kbd "s-P") . execute-extended-command)
     ((kbd "s-q") . save-buffers-kill-emacs)
     ((kbd "s-s") . save-buffer)
     ((kbd "s-f") . swiper)
     ((kbd "s-F") . counsel-rg)
     ((kbd "s-v") . evil-paste-after)
     ((kbd "s-x") . execute-extended-command)
     ((kbd "s-w") . delete-frame)
     ((kbd "s-z") . undo)
     ((kbd "s-0") . laat/text-scale-zero)
     ((kbd "s-+") . text-scale-increase)
     ((kbd "s--") . text-scale-decrease)))
#+end_src

* MacOS
** Trash

#+begin_src emacs-lisp
  (use-package osx-trash
    :ensure t
    :ensure-system-package trash
    :if (memq window-system '(mac ns darwin))
    :custom
    (delete-by-moving-to-trash t))
#+end_src

** Dictionary.app

#+begin_src emacs-lisp
  (use-package osx-dictionary
    :ensure t
    :if (memq window-system '(mac ns darwin))
    :general
    (laat/leader-keys
      "@@" 'osx-dictionary-search-word-at-point
      "@æ" 'osx-dictionary-search-input))
#+end_src

** Keychain

#+begin_src emacs-lisp

  (eval-after-load 'auth-source
    '(when (member window-system '(mac ns))
       (add-to-list 'auth-sources 'macos-keychain-internet)
       (add-to-list 'auth-sources 'macos-keychain-generic)))

#+end_src

* UI Configuration
** Color Theme

#+begin_src emacs-lisp
  (use-package doom-themes
    :ensure t
    :config
    (load-theme 'doom-one t)
    (doom-themes-org-config))
#+end_src

#+begin_src emacs-lisp
  (set-frame-parameter (selected-frame) 'alpha '(90 . 90))
  (add-to-list 'default-frame-alist '(alpha . (90 . 90)))
#+end_src

** Mouse
Shift click with mouse selection.

#+begin_src emacs-lisp
(global-set-key (kbd "S-<down-mouse-1>") #'mouse-set-mark)
#+end_src

** Emacs Dashboard

#+begin_src emacs-lisp
  (use-package dashboard
    :ensure t
    :diminish (dashboard-mode page-break-lines-mode)
    :config
    (dashboard-setup-startup-hook)
    :custom
    (dashboard-banner-logo-title "Simplicity is prerequisite for reliability.")
    (dashboard-startup-banner "~/.emacs.d/profile.png")
    (dashboard-projects-backend 'projectile)
    (dashboard-center-content t)
    (dashboard-items
     '((bookmarks . 5)
       (agenda . 5)
       (recents  . 5)
       (projects . 5)
       ;; (registers . 5)
       )))
#+end_src

** Quickly to important stuff

#+begin_src emacs-lisp
  (defun laat/switch-to-dashboard ()
    (interactive)
    (switch-to-buffer "*dashboard*"))
  (defun laat/switch-to-scratch ()
    (interactive)
    (switch-to-buffer "*scratch*"))
  (defun laat/switch-to-messages ()
    (interactive)
    (switch-to-buffer "*Messages*"))
  (defun laat/switch-to-mobile-notes ()
    (interactive)
    (find-file "~/.notes/notes.org"))
  (defun laat/switch-to-mobile-inbox ()
    (interactive)
    (find-file "~/.notes/inbox.org"))
  (defun laat/switch-to-notes ()
    (interactive)
    (find-file "~/Dropbox/notes/notes.org"))
  (defun laat/switch-to-agenda-file ()
    (interactive)
    (find-file "~/.notes/agenda.org"))
  (defun laat/switch-to-journal ()
    (interactive)
    (find-file "~/Dropbox/notes/journal.org"))
  (defun laat/switch-to-config ()
    (interactive)
    (find-file "~/.emacs.d/emacs.org"))
  (with-eval-after-load 'evil
    (laat/leader-keys
      "ff" 'find-file
      "fp" 'projectile-find-file
      "fd" '(laat/switch-to-dashboard :which-key "dashboard")
      "fs" '(laat/switch-to-scratch :which-key "scratch")
      "fn" '(laat/switch-to-notes :which-key "notes")
      "fb" '(laat/switch-to-mobile-notes :which-key "mobile notes")
      "fi" '(laat/switch-to-mobile-inbox :which-key "mobile inbox")
      "fm" '(laat/switch-to-messages :which-key "mobile notes")
      "fe" '(laat/switch-to-config :which-key "emacs config")
      "fj" '(laat/switch-to-journal :which-key "journal")
      "fa" '(laat/switch-to-agenda-file :which-key "agenda file")))
#+end_src

** Recent files

Enable and save lots.

#+begin_src emacs-lisp
  (recentf-mode 1)
  (setq
   recentf-max-saved-items 1000
   recentf-max-menu-items 50)
#+end_src

Exclude lots of stuff

#+begin_src emacs-lisp
  (add-to-list 'recentf-exclude "\\.emacs\\.d/elpa")
  (add-to-list 'recentf-exclude "\\.emacs\\.d/bookmarks")
  (add-to-list 'recentf-exclude "\\.emacs\\.d/recentf")
  (add-to-list 'recentf-exclude "\\.elfeed/index")
  (add-to-list 'recentf-exclude "\\.emacs\\.d/ido.last")
  (add-to-list 'recentf-exclude "\\.emacs\\.d/\\.cache/treemacs-persist")
  (add-to-list 'recentf-exclude "\\.emacs\\.d/\\.cache/treemacs-persist")
  (add-to-list 'recentf-exclude "/Applications/Emacs\\.app")
#+end_src

** Winner

#+begin_src emacs-lisp
  (use-package winner
    :ensure t
    :commands
    winner-undo
    winner-redo
    :config
    (winner-mode 1)
    (require 'windmove)
    (defun laat/hydra-move-splitter-left (arg)
      "Move window splitter left."
      (interactive "p")
      (if (let ((windmove-wrap-around))
            (windmove-find-other-window 'right))
          (shrink-window-horizontally arg)
        (enlarge-window-horizontally arg)))

    (defun laat/hydra-move-splitter-right (arg)
      "Move window splitter right."
      (interactive "p")
      (if (let ((windmove-wrap-around))
            (windmove-find-other-window 'right))
          (enlarge-window-horizontally arg)
        (shrink-window-horizontally arg)))

    (defun laat/hydra-move-splitter-up (arg)
      "Move window splitter up."
      (interactive "p")
      (if (let ((windmove-wrap-around))
            (windmove-find-other-window 'up))
          (enlarge-window arg)
        (shrink-window arg)))

    (defun laat/hydra-move-splitter-down (arg)
      "Move window splitter down."
      (interactive "p")
      (if (let ((windmove-wrap-around))
            (windmove-find-other-window 'up))
          (shrink-window arg)
        (enlarge-window arg)))
    :hydra
    (laat/window-hydra
     (:color red)
     "window"
     ("h" laat/hydra-move-splitter-left)
     ("j" laat/hydra-move-splitter-down)
     ("k" laat/hydra-move-splitter-up)
     ("l" laat/hydra-move-splitter-right)
     ("o" delete-other-windows "delete others" :exit t)
     ("d" delete-window "delete this" :exit t)
     ("=" balance-windows "balance" :exit t)
     ("v" (lambda ()
            (interactive)
            (split-window-below)
            (windmove-down))
      "split below" :exit t)
     ("s" (lambda ()
            (interactive)
            (split-window-right)
            (windmove-right)) "split right" :exit t )
     ("u" winner-undo "undo")
     ("r" winner-redo "redo"))
    :general
    (laat/leader-keys
      "w" 'laat/window-hydra/body))
#+end_src

** Mode line

#+begin_src emacs-lisp
  (use-package all-the-icons
    :ensure t)

  (use-package nerd-icons
    :ensure t)

  (use-package doom-modeline
    :ensure t
    :init
    (doom-modeline-mode 1)
    :custom
    ((doom-modeline-height 15)
     (doom-modeline-minor-modes t)))


  (diminish 'visual-line-mode)
#+end_src

Installint fonts:
M-x nerd-the-icons-install-fonts

** Helpful

#+begin_src emacs-lisp
  (use-package helpful
    :ensure t
    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
    :bind
    ([remap describe-function] . counsel-describe-function)
    ([remap describe-command] . helpful-command)
    ([remap describe-variable] . counsel-describe-variable)
    ([remap describe-key] . helpful-key))
#+end_src

** Which Key

#+begin_src emacs-lisp
  (use-package which-key
    :ensure t
    :diminish
    :init (which-key-mode)
    :config
    (setq which-key-idle-delay 1))
#+end_src

** Ivy

#+begin_src emacs-lisp
  (use-package ivy
    :ensure t
    :diminish
    :general
    (laat/leader-keys
      "b" 'ivy-switch-buffer)
    :bind
    (("C-s" . swiper)
     :map ivy-minibuffer-map
     ("TAB" . ivy-alt-done)
     ("C-l" . ivy-alt-done)
     ("C-j" . ivy-next-line)
     ("C-k" . ivy-previous-line)
     :map ivy-switch-buffer-map
     ("C-k" . ivy-previous-line)
     ("C-l" . ivy-done)
     ("C-d" . ivy-switch-buffer-kill)
     :map ivy-reverse-i-search-map
     ("C-k" . ivy-previous-line)
     ("C-d" . ivy-reverse-i-search-kill))
    :config
    (ivy-mode 1))

  (use-package ivy-rich
    :ensure t
    :after ivy
    :defer 3
    :init
    (ivy-rich-mode 1))

  (use-package counsel
    :ensure t
    :diminish
    :bind
    (("s-b" . 'counsel-switch-buffer)
     ("C-M-j" . 'counsel-switch-buffer)
     :map minibuffer-local-map
     ("C-r" . 'counsel-minibuffer-history))
    :config
    (counsel-mode 1)
    ;; remove the ^ in M-x search
    (setcdr (assoc 'counsel-M-x ivy-initial-inputs-alist) "")
    (setcdr (assoc 'org-refile ivy-initial-inputs-alist) ""))

#+end_src

** Drag Stuff

#+begin_src emacs-lisp
  (use-package drag-stuff
    :ensure t
    :diminish
    :custom
    (drag-stuff-except-modes '(org-mode))
    :config
    (drag-stuff-define-keys)
    (drag-stuff-global-mode 1))
#+end_src

** Reveal in Finder

#+begin_src emacs-lisp
  (use-package reveal-in-osx-finder
    :ensure t
    :commands (reveal-in-osx-finder))
#+end_src

** Bookmarks

#+begin_src emacs-lisp
  (setq bookmark-save-flag 1) ;; save bookmarks on edit

#+end_src

** Calendar

#+begin_src emacs-lisp
  (setq
   calendar-latitude 60.0
   calendar-longitude 10.7
   calendar-location-name "Oslo")
#+end_src

** Spellcheck
*** Norwegian

Emacs does not know that there are multiple written Norwegian languages.

#+begin_src emacs-lisp
  (use-package ispell
    :diminish
    :defer 3
    :config
    (delete '("norsk" "nn_NO") ispell-dicts-name2locale-equivs-alist)
    (add-to-list 'ispell-dicts-name2locale-equivs-alist '("norsk-bokmål" "nb_NO"))
    (add-to-list 'ispell-dicts-name2locale-equivs-alist '("norsk-nynorsk" "nn_NO")))
#+end_src

*** OSX hunspell

#+begin_src shell :tangle no
  brew install hunspell
  mkdir -p "$HOME/Library/Spelling" # the directory for *.aff and *.dic
#+end_src

It is important to have the spellcheck files for your LANG. I've tried to make it work without it, but cannot for the life of me get it to work.

#+begin_src emacs-lisp :tangle no :results value replace
  (getenv "LANG")
#+end_src

It's sometimes weird like =en_NO.UTF-8= so set it to something you have downloaded.

#+begin_src emacs-lisp
  (setenv "LANG" "en_US.UTF-8")
#+end_src

#+begin_src emacs-lisp
  (setq ispell-program-name (executable-find "hunspell"))
#+end_src

*** Hunspell dictionaries
**** nb_NO

#+begin_src sh :tangle no
  wget -O nb_NO.aff https://cgit.freedesktop.org/libreoffice/dictionaries/plain/no/nb_NO.aff
  wget -O nb_NO.dic https://cgit.freedesktop.org/libreoffice/dictionaries/plain/no/nb_NO.dic
#+end_src

**** nn_NO

#+begin_src sh :tangle no
  wget -O nn_NO.aff https://cgit.freedesktop.org/libreoffice/dictionaries/plain/no/nn_NO.aff
  wget -O nn_NO.dic https://cgit.freedesktop.org/libreoffice/dictionaries/plain/no/nn_NO.dic
#+end_src

**** en_GB
#+begin_src sh :tangle no
  wget -O en_GB.aff https://cgit.freedesktop.org/libreoffice/dictionaries/plain/en/en_GB.aff
  wget -O en_GB.dic https://cgit.freedesktop.org/libreoffice/dictionaries/plain/en/en_GB.dic
#+end_src

**** en_US

Download en_US from [[http://wordlist.aspell.net/dicts/][aspell.net]] and extract it to =~/Library/Spelling=

*** Org code blocks

#+begin_src emacs-lisp
  ;; ignore orgmode blocks
  (add-to-list 'ispell-skip-region-alist '(":\\(PROPERTIES\\|LOGBOOK\\):" . ":END:"))
  (add-to-list 'ispell-skip-region-alist '("#\\+BEGIN_SRC" . "#\\+END_SRC"))
  (add-to-list 'ispell-skip-region-alist '("#\\+BEGIN_EXAMPLE" . "#\\+END_EXAMPLE"))
#+end_src

*** Flyspell

#+begin_src emacs-lisp
  (defun laat/bokmål ()
    (interactive)
    (ispell-change-dictionary "norsk-bokmål"))
  (defun laat/nynorsk ()
    (interactive)
    (ispell-change-dictionary "norsk-nynorsk"))
  (defun laat/english ()
    (interactive)
    (ispell-change-dictionary "english"))

  (use-package flyspell
    :diminish
    :general
    (laat/leader-keys
      "mf" '(:ignore t :which-key "spell check")
      "mft" '(flyspell-mode :which-key "flyspell text mode")
      "mfp" '(flyspell-prog-mode :which-key "flyspell prog mode")
      "mfm" '(laat/english :which-key "english")
      "mfn" '(laat/bokmål :which-key "bokmål")
      "mfb" '(laat/nynorsk :which-key "nynorsk"))
    :config
    (setq
     flyspell-issue-welcome-flag nil
     ;; Significantly speeds up flyspell, which would otherwise print
     ;; messages for every word when checking the entire buffer
     flyspell-issue-message-flag nil))

  (use-package flyspell-correct
    :ensure t
    :after flyspell
    :general
    (general-define-key
     :states '(normal visual)
     "z=" 'flyspell-correct-at-point))

  ;; M-o opens extra actions like save to local directory
  (use-package flyspell-correct-ivy
    :ensure t
    :after flyspell-correct)
#+end_src

** Diminish

#+begin_src emacs-lisp
  (use-package diminish :ensure t)
#+end_src

* Development
** Basic
*** Line numbers

#+begin_src emacs-lisp
  (add-hook 'prog-mode-hook 'display-line-numbers-mode)
#+end_src

*** Sub words

Treat =CamelCaseSubWords= as separate words in every programming
mode.

#+begin_src emacs-lisp
  (use-package subword
    :diminish subword-mode
    :hook (prog-mode . subword-mode))
#+end_src

*** Eldoc

#+begin_src emacs-lisp
  (use-package eldoc
    :diminish
    :hook (prog-mode . eldoc-mode))
#+end_src

*** Find indent

#+begin_src emacs-lisp
  (use-package dtrt-indent
    :diminish
    :hook (json-mode . dtrt-indent-mode)
    :ensure t)
#+end_src

*** Editorconfig

#+begin_src emacs-lisp
  (use-package editorconfig
    :ensure t
    :diminish
    :config
    (editorconfig-mode 1))
#+end_src

*** Font lock TODO

#+begin_src emacs-lisp
  (defun laat/add-watchwords ()
    (font-lock-add-keywords
     nil '(("\\<\\(FIXME\\|TODO\\|NOCOMMIT\\|XXX\\)\\>"
            1 '((:foreground "#d7a3ad") (:weight bold)) t))))
  (add-hook 'prog-mode-hook 'laat/add-watchwords)
#+end_src

*** Rainbow delimiters

#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :ensure t
    :commands rainbow-delimiters-mode
    :init (add-hook 'prog-mode-hook 'rainbow-delimiters-mode))
#+end_src

*** Unicode Trolls

#+begin_src emacs-lisp
  (use-package unicode-troll-stopper
    :ensure t
    :diminish unicode-troll-stopper-mode
    :commands unicode-troll-stopper-mode
    :init
    (add-hook 'prog-mode-hook 'unicode-troll-stopper-mode))
#+end_src

*** White space

#+begin_src emacs-lisp
  (use-package whitespace-cleanup-mode
    :ensure t
    :diminish
    :hook (prog-mode . whitespace-cleanup-mode))

  (setq-default tab-width 2)
  (setq-default indent-tabs-mode nil)

  (setq require-final-newline t)

  (add-hook 'prog-mode-hook
            (lambda () (setq show-trailing-whitespace t)))

  (use-package whitespace
    :ensure t
    :diminish
    :hook (prog-mode . whitespace-mode)
    :hook (before-save . whitespace-cleanup)
    :custom
    (whitespace-line-column nil)
    (whitespace-global-modes '(not org-mode))
    (whitespace-style
     '(face
       tabs
       spaces
       trailing
       ;; lines
       ;; space-before-tab
       ;; newline
       indentation
       ;; empty
       ;; space-after-tab
       ;; space-mark
       tab-mark
       ;; newline-mark
       )))

  (use-package highlight-indent-guides
    :ensure t
    :diminish highlight-indent-guides-mode
    :hook (prog-mode . highlight-indent-guides-mode)
    :custom
    (highlight-indent-guides-method 'bitmap)
    (highlight-indent-guides-bitmap-function 'highlight-indent-guides--bitmap-line)
    (highlight-indent-guides-responsive 'top))
#+end_src

*** Comments

#+begin_src emacs-lisp
  (use-package evil-nerd-commenter
    :ensure t
    :general
    (laat/leader-keys
      "cc" '(evilnc-comment-or-uncomment-lines :which-key "comment")
      "ci" '(evilnc-toggle-invert-comment-line-by-line :which-key "toggle invert")))
#+end_src




*** yasnippet

#+begin_src emacs-lisp
  (use-package yasnippet
    :ensure t
    :config
    (yas-global-mode t)
    :diminish yas-minor-mode)
#+end_src

*** Compilation
#+end_src


[[https://stackoverflow.com/questions/13397737/ansi-coloring-in-compilation-mode][ANSI Coloring in Compilation Mode]]
#+begin_src emacs-lisp
  (ignore-errors
    (require 'ansi-color)
    (defun my-colorize-compilation-buffer ()
      (when (eq major-mode 'compilation-mode)
        (ansi-color-apply-on-region compilation-filter-start (point-max))))
    (add-hook 'compilation-filter-hook 'my-colorize-compilation-buffer))
#+end_src

*** Tree Sitter

#+begin_src emacs-lisp
  (use-package treesit)
  (use-package treesit-auto
    :ensure t
    :custom
    (treesit-auto-install 'prompt)
    :config
    (treesit-auto-add-to-auto-mode-alist 'all)
    (global-treesit-auto-mode))
#+end_src

*** Completion

#+begin_src emacs-lisp

  (use-package company
    :ensure t
    :diminish
    :bind
    (("C-SPC" . company-complete-common)
     :map prog-mode-map
     ("<tab>" . company-indent-or-complete-common))
    :config
    (global-company-mode))

  (use-package company-box
    :ensure t
    :diminish
    :hook (company-mode . company-box-mode))

#+end_src

*** LSP

#+begin_src emacs-lisp
  (use-package eglot
    :ensure t
    :hook (prog-mode . eglot-ensure)
    :general
    (laat/leader-keys
      "v" '(:ignore t :which-key "language server")
      "vo" '(eglot-code-action-organize-imports :which-key "organize import")
      "v." '(eglot-code-actions :which-key "code actions")
      "vr" '(eglot-rename :which-key "rename")
      "v=" '(eglot-format :which-key "format"))
    :custom
    (eglot-autoshutdown t)
    (eglot-confirm-server-initiated-edits nil "no confirm"))
#+end_src

*** Flymake

#+begin_src emacs-lisp
  (use-package flymake
    :hook (prog-mode . flymake-mode)
    :bind (:map flymake-mode-map
                ("C-c ! n" . flymake-goto-next-error)
                ("C-c ! p" . flymake-goto-prev-error)
                ("C-c ! l" . flymake-show-buffer-diagnostics)))
#+end_src

** Copilot

#+begin_src emacs-lisp
  (use-package copilot
    :quelpa (copilot :fetcher github
                     :repo "zerolfx/copilot.el"
                     :branch "main"
                     :files ("dist" "*.el"))
    :config
    ;; (add-hook 'prog-mode-hook 'copilot-mode)
    :general
    (:states 'insert :keymaps 'copilot-mode-map
             "C-l" 'copilot-accept-completion
             "C-ø" 'copilot-next-completion
             "C-æ" 'copilot-previous-completion)
    (laat/leader-keys
      "tc" '(copilot-mode :which-key "Copilot")))
#+end_src

** Projects

Set this to the folder where you keep your Git repos!

~M-x customize-option projectile-project-search-path~

#+begin_src emacs-lisp
  (use-package projectile
    :ensure t
    :diminish
    :custom
    (projectile-completion-system 'ivy)
    (projectile-switch-project-action #'projectile-dired)
    (projectile-ignored-projects '("~/"))
    :general
    (laat/leader-keys
      "'" 'projectile-run-vterm
      "p" 'projectile-command-map)
    :bind-keymap
    ("C-c p" . projectile-command-map))

  (use-package counsel-projectile
    :ensure t
    :config (counsel-projectile-mode))
#+end_src

** Git
*** Magit

#+begin_src emacs-lisp

  (use-package magit
    :ensure t
    :general
    (laat/leader-keys
      "g" '(:ignore t :which-key "git")
      "gg" '(magit-dispatch :which-key "magit dispatch")
      "gf" '(magit-file-dispatch :which-key "magit file dispatch")
      "gs" '(magit-status :which-key "git status"))
    :custom
    (magit-display-buffer-function #'magit-display-buffer-fullframe-status-topleft-v1)
    :config
    (add-hook 'git-commit-mode-hook 'evil-insert-state)
    (add-to-list 'evil-insert-state-modes 'magit-log-edit-mode))

#+end_src

When 'C-c C-c' or 'C-c C-k' are pressed in the magit commit message buffer, kill the magit-diff buffer related to the current repo.

#+begin_src emacs-lisp
  (defun laat/magit-cleanup-magit-diff-buffer ()
    (dolist ($buf (magit-mode-get-buffers))
      (with-current-buffer $buf
        (if (eq major-mode 'magit-diff-mode)
            (kill-buffer $buf)))))

  (add-hook 'git-commit-setup-hook
            (lambda ()
              (add-hook 'with-editor-post-cancel-hook
                        'laat/magit-cleanup-magit-diff-buffer)
              (add-hook 'with-editor-post-finish-hook
                        'laat/magit-cleanup-magit-diff-buffer)))
#+end_src

*** Forge


#+begin_src emacs-lisp

  (use-package forge
    :ensure t
    :after magit
    :general
    (laat/leader-keys
      "gh" '(forge-dispatch :which-key "forge")
      "g SPC" '(forge-browse :which-key "browse")))

#+end_src

*** Git Gutter

#+begin_src emacs-lisp

    (use-package git-gutter
      :hook
      (prog-mode . git-gutter-mode)
      (org-mode . git-gutter-mode)
      :diminish
      :config
      (setq git-gutter:update-interval 0.02))

    (use-package git-gutter-fringe
      :config
      (define-fringe-bitmap 'git-gutter-fr:added [224] nil nil '(center repeated))
      (define-fringe-bitmap 'git-gutter-fr:modified [224] nil nil '(center repeated))
      (define-fringe-bitmap 'git-gutter-fr:deleted [128 192 224 240] nil nil 'bottom))

#+end_src

*** Modes

#+begin_src emacs-lisp
(use-package git-modes
  :ensure t
  :mode (("\\.gitattributes\\'" . gitattributes-mode)
         ("\\.gitconfig\\'" . gitconfig-mode)
         ("\\.gitignore\\'" . gitignore-mode)))
#+end_src

** Languages
*** Ruby

#+begin_src emacs-lisp
  (use-package ruby-ts-mode
    :mode "\\.rb\\'"
    :mode "Rakefile\\'"
    :mode "Gemfile\\'"
    :general
    (laat/local-leader-keys
      :states 'normal
      :keymaps 'ruby-ts-mode-map
      "s" '(treesit-beginning-of-defun :which-key "defun start")
      "e" '(treesit-end-of-defun :which-key "defun end"))
    :config
    (add-to-list 'treesit-language-source-alist '(ruby "https://github.com/tree-sitter/tree-sitter-ruby" "master" "src"))
    :custom
    (ruby-indent-level 4)
    (ruby-indent-tabs-mode nil))
#+end_src

*** JavaScript

#+begin_src emacs-lisp
  (use-package js-base-mode
    :defer t
    :ensure js
    :custom
    (js-indent-level 2)
    :config
    (add-to-list 'treesit-language-source-alist
                 '(javascript "https://github.com/tree-sitter/tree-sitter-javascript" "master" "src")))
#+end_src

*** TypeScript

#+begin_src emacs-lisp
  (use-package typescript-ts-mode
    :ensure typescript-ts-mode
    :defer t
    :custom
    (typescript-indent-level 2)
    :config
    (add-to-list 'treesit-language-source-alist
                 '(typescript "https://github.com/tree-sitter/tree-sitter-typescript" "master" "typescript/src")
                 '(tsx "https://github.com/tree-sitter/tree-sitter-typescript" "master" "tsx/src")))
#+end_src

*** Svelte

#+begin_src emacs-lisp
  (use-package svelte-mode
    :ensure
    :defer t
    :config
    (add-to-list 'treesit-language-source-alist
                 '(svelte "https://github.com/Himujjal/tree-sitter-svelte" "master" "src"))
    (add-to-list 'eglot-server-programs
                 '(svelte-mode . ("svelteserver" "--stdio"))))
#+end_src


* Org
** Base Config

#+begin_src emacs-lisp
  (defun laat/insert-kbd (key)
    "Ask for a key then insert its description. Will work on both
      org-mode and any mode that accepts plain html."
    (interactive
     (list (read-key-sequence "Press key: ")))
    (let* ((orgp (derived-mode-p 'org-mode))
           (tag (if orgp "~%s~" "<kbd>%s</kbd>")))
      (if (null (equal key "\C-m"))
          (insert (format tag (help-key-description key nil)))
        ;; If you just hit RET.
        (insert (format tag ""))
        (forward-char (if orgp -1 -6)))))


  (use-package org
    :pin gnu
    :ensure org-contrib
    :hook (org-capture-mode . evil-insert-state)
    :general
    (general-define-key
     :keymaps 'org-mode-map
     "C-c C-j" 'counsel-org-goto
     "s-f" 'counsel-org-goto
     "s-j" 'org-metadown
     "s-k" 'org-metaup
     ;; C-j and C-k walks up the treee
     [remap outline-forward-same-level] 'org-forward-element
     [remap outline-backward-same-level] 'org-backward-element)
    (:keymaps 'org-src-mode-map
              "C-c C-c" 'org-edit-src-exit)
    (laat/leader-keys
      "x" '(org-capture :which-key "capture")
      "a" '(org-agenda :which-key "agenda")
      "tl" '(org-toggle-link-display :which-key "toggle links"))
    (laat/local-leader-keys
      :states 'normal
      :keymaps 'org-mode-map
      "j" '(counsel-org-goto :which-key "go to heading")
      "t" '(org-todo :which-key "task")
      "r" '(org-babel-remove-result :which-key "remove result")
      "cc" '(org-ctrl-c-ctrl-c :which-key "C-c C-c"))
    :config
    (require 'org-faces)
    ;; https://emacs.stackexchange.com/questions/26923
    (advice-add 'org-refile :after (lambda (&rest _) (org-save-all-org-buffers)))

    ;; I want ids
    (add-hook 'org-capture-mode-hook #'org-id-get-create)
    (add-hook 'org-after-refile-insert-hook #'org-id-get-create)

    ;; magic copy links
    (org-link-set-parameters
     "copy"
     :follow (lambda (link) (kill-new link))
     :export (lambda (_ desc &rest _) desc))

    ;; add date captured
    (defun laat/add-property-with-date-captured ()
      "Add DATE_CAPTURED property to the current item."
      (interactive)
      (org-set-property "DATE_CAPTURED" (format-time-string "%F")))
    (add-hook 'org-capture-before-finalize-hook 'laat/add-property-with-date-captured)

    :custom
    (org-catch-invisible-edits 'smart)
    (org-ctrl-k-protect-subtree t)
    (org-image-actual-width nil "allows #+ATTR_ORG: :width 100")
    (org-cycle-separator-lines 0 "compact folding")
    (org-ellipsis "…" "a pretty ellipsis. Alternatives … ⤵ ▼, ↴, ⬎, ⤷, and ⋱.")
    (org-agenda-files
     '("~/.notes/agenda.org"
       "~/Dropbox/notes/agenda.org"))
    (org-refile-targets
     '((nil :maxlevel . 9)
       ("~/Dropbox/notes/notes.org" :maxlevel . 3)
       (org-agenda-files :maxlevel . 9)))
    (org-refile-use-outline-path nil)
    (org-directory "~/Dropbox/notes/")
    (org-log-done nil "track when TODO -> DONE")
    (org-log-into-drawer t "log into drawer")
    (org-todo-keywords '((sequence "TODO(t)" "WAIT(w@/!)" "|" "DONE(d!)" "CANCELED(c@)")))
    (org-confirm-babel-evaluate nil "C-c C-c on code blocks do not ask")
    (org-edit-src-auto-save-idle-delay 5)
    (org-src-ask-before-returning-to-edit-buffer nil)
    (org-capture-templates
     `(("s" "Simple" entry (file+headline "~/.notes/inbox.org" "Desktop Inbox")
        "\n** %?\n\n\n\n")
       ("w" "TODO Work" entry (file+headline ,(concat org-directory "agenda.org") "Work Tasks")
        "\n** TODO %?\n\n\n\n")
       ("l" "TODO Life" entry (file+headline "~/.notes/agenda.org" "Life Tasks")
        "\n** TODO %?\n\n\n\n")
       ("j" "Journal" entry (file+olp+datetree ,(concat org-directory "journal.org"))
        "\n* %<%I:%M %p> - Journal :journal:\n\n%?\n\n")
       ;; https://salvatore.denaro.nyc/2020/08/capturing-text-from-any-mac-application.html
       ("g" "Protocol Grab" entry (file+headline "~/.notes/inbox.org"  "Desktop Inbox" )
        "* %? \n%i\n" :prepend t :created t )
       ;; org-capture Chrome Extension
       ("p" "Protocol" entry (file+headline "~/.notes/inbox.org" "Desktop Inbox")
        "* %?\n\n[[%:link][%:description]] \n\n#+BEGIN_QUOTE\n%i\n#+END_QUOTE\n\n")
       ("L" "Protocol Link" entry (file+headline ,(concat org-directory "notes.org") "Inbox")
        "* %?\n\n[[%:link][%:description]]"))))

  (use-package evil-org
    :ensure t
    :diminish
    :after org
    :hook (org-mode . evil-org-mode)
    :config
    (require 'evil-org-agenda)
    (evil-org-agenda-set-keys))

  (use-package org-indent
    :diminish
    :hook (org-mode . org-indent-mode))

  (use-package org-superstar
    :ensure t
    :hook (org-mode . org-superstar-mode)
    :config
    (org-superstar-configure-like-org-bullets))
#+end_src

** Notes Backup

#+begin_src emacs-lisp
  (use-package notes-backup) ;; my custom sctipt in lisp/notes-backup
#+end_src

** htmlize syntax highlight
Syntax highlihgt exported html
#+begin_src emacs-lisp
  (use-package htmlize
    :ensure t
    :after org)
#+end_src

to set a background color
#+begin_src org
#+HTML_HEAD: <style>pre.src {background-color: #303030; color: #e5e5e5;}</style>
#+end_src

** org-protocol
*** base config

#+begin_src emacs-lisp
  (defun laat/protocol-magit (data)
    "Open magit buffer for repository"
    (magit-status-setup-buffer (plist-get data :repo))
    (select-frame-set-input-focus (selected-frame)))

  (use-package org-protocol
    :defer t
    :config
    (add-to-list
     'org-protocol-protocol-alist
     '("Open magit status"
       :protocol "magit"
       :function laat/protocol-magit
       :kill-client t)))
#+end_src

*** Chrome Extensoion

- [[http://slumpy.org/blog/2015-07-07-org-capture-chrome-extension/][Org-Capture Chrome Extension]]
- [[https://github.com/sprig/org-capture-extension][sprig/org-capture-extension]]

*** Text from all OS X Apps

Automator.app (builtin) and ⌘-s is your friend. Remember =pass input=


#+begin_src sh
  data="$@"
  encoded=$(python3 -c "import sys, urllib.parse; print(urllib.parse.quote(' '.join(sys.argv[1:]), safe=''))" "${data[@]}")
  open "org-protocol://capture?template=g&body=$encoded"
#+end_src
[[https://salvatore.denaro.nyc/2020/08/capturing-text-from-any-mac-application.html][Source]]

#+DOWNLOADED: screenshot @ 2020-11-27 18:29:46
#+ATTR_ORG: :width 600
[[file:Org/2020-11-27_18-29-46_screenshot.png]]

*** Open Magit on OS X

Magit bash script

#+begin_src shell :tangle no
  #!/usr/bin/env bash
  set -o errexit
  set -o pipefail
  set -o nounset

  arg1="${1:-$(pwd)}"

  encoded=$(python3 -c "
  import sys
  import os
  import urllib.parse
  print(urllib.parse.quote(os.path.abspath(sys.argv[1]), safe=''))" "${arg1}")

  proto="org-protocol://magit?repo=${encoded}"

  if [[ "$OSTYPE" == "darwin"* ]]; then
      open "${proto}"
  else
      emacsclient "${proto}"
  fi
#+end_src

** writegood

#+begin_src emacs-lisp
  (use-package writegood-mode
    :ensure t
    :commands
    (writegood-mode
     writegood-grade-level
     writegood-reading-ease)
    :general
    (laat/leader-keys
      "mg" '(:ignore t :which-key "writegood")
      "mgg" 'writegood-mode
      "mgl" 'writegood-grade-level
      "mge" 'writegood-reading-ease))
#+end_src

** org-download

#+begin_src emacs-lisp
  (use-package org-download
    :ensure t
    :hook (dirred-mode . org-download-enable)
    :general
    (laat/local-leader-keys
      :states 'normal
      :keymaps 'org-mode-map
      "y" '(:ignore t :which-key "yank")
      "yi" '(org-download-clipboard :which-key "clipboard image")))
#+end_src

On Macos use before calling =org-download-clipboard=
#+begin_src shell :tangle no
  brew install pngpaste
#+end_src

** Visual center

#+begin_src emacs-lisp
  (defun laat/org-mode-visual-fill ()
    (visual-fill-column-mode 1))
  (use-package visual-fill-column
    :ensure t
    :custom
    (visual-fill-column-width 100)
    (visual-fill-column-center-text t)
    :hook (org-mode . laat/org-mode-visual-fill)
    :config
    (advice-add 'text-scale-adjust :after #'visual-fill-column-adjust))
#+end_src

** <lang templates

#+begin_src emacs-lisp
  (use-package org-tempo
    :after org
    :config
    (add-to-list 'org-structure-template-alist '("'" . "quote"))
    (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
    (add-to-list 'org-structure-template-alist '("org" . "src org"))
    (add-to-list 'org-structure-template-alist '("fs" . "src fsharp"))
    (add-to-list 'org-structure-template-alist '("me" . "src mermaid"))
    (add-to-list 'org-structure-template-alist '("http" . "src http"))
    (add-to-list 'org-structure-template-alist '("less" . "src less"))
    (add-to-list 'org-structure-template-alist '("css" . "src css"))
    (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
    (add-to-list 'org-structure-template-alist '("py" . "src python"))
    (add-to-list 'org-structure-template-alist '("sql" . "src sql"))
    (add-to-list 'org-structure-template-alist '("js" . "src js"))
    (add-to-list 'org-structure-template-alist '("json" . "src json"))
    (add-to-list 'org-structure-template-alist '("md" . "src markdown"))
    (add-to-list 'org-structure-template-alist '("typescript" . "src typescript")))
#+end_src

** Babel
*** Images
#+begin_src emacs-lisp
  (with-eval-after-load 'org
    (add-hook 'org-babel-after-execute-hook
              (lambda ()
                (when org-inline-image-overlays
                  (org-redisplay-inline-images)))))
#+end_src
*** Emacs lisp

#+begin_src emacs-lisp
  (defun disable-fylcheck-in-org-src-block ()
    (setq-local flycheck-disabled-checkers '(emacs-lisp-checkdoc)))

  (add-hook 'org-src-mode-hook 'disable-fylcheck-in-org-src-block)
#+end_src

*** Async code blocks

=:async= header args

#+begin_src emacs-lisp
  (use-package ob-async
    :ensure t
    :after org
    :custom
    (ob-async-no-async-languages-alist '("ipython")))
#+end_src

this does not block with the =:async= header
#+begin_src shell :tangle no :async
  sleep 3s && echo "Done!"
#+end_src

*** typescript

#+begin_src emacs-lisp
  (use-package ob-typescript
    :ensure t
    :after org
    :config
    (add-to-list 'org-babel-load-languages '(typescript . t)))
#+end_src

*** HTTP

#+begin_src emacs-lisp
  (use-package ob-http
    :ensure t
    :after org
    :config
    (add-to-list 'org-babel-load-languages '(http . t)))
#+end_src

#+begin_src http :pretty :wrap src json :tangle no
  GET https://httpbin.org/get
  Accept: application/json
#+End_src

*** latex-as-png

#+begin_src emacs-lisp
  (use-package ob-latex-as-png
    :ensure t
    :defer 2
    :after org)

  ;; Always redisplay images after C-c C-c (org-ctrl-c-ctrl-c)
  ;; (add-hook 'org-babel-after-execute-hook 'org-redisplay-inline-images)
#+end_src

*** mermaid diagrams
[[https://mermaid-js.github.io/mermaid/#/][mermaid]] can draw nice diagrams inline in emacs

=C-c C-x C-v org-toggle-inline-images=

#+begin_src shell :tangle no
  export PUPPETEER_EXPERIMENTAL_CHROMIUM_MAC_ARM=true
  npm install -g @mermaid-js/mermaid-cli
#+end_src

#+begin_src emacs-lisp
  (use-package ob-mermaid
    :ensure t
    :after org
    :config
    (add-to-list 'org-babel-load-languages '(mermaid . t)))
#+end_src

#+begin_src mermaid :file mermaid.png :tangle no
sequenceDiagram
    A-->B: Works!
#+end_src

#+RESULTS:
[[file:mermaid.png]]

*** fsharp

#+begin_src emacs-lisp
  (use-package ob-fsharp
    :ensure t
    :after org
    :config
    (add-to-list 'org-babel-load-languages '(fsharp . t)))
#+end_src

#+begin_src fsharp :tangle no
  let x = "hello"
  sprintf "%s world" x
#+end_src

*** SQL

#+begin_src emacs-lisp
  (use-package ob-sql
    :defer t
    :after org
    :config
    (add-to-list 'org-babel-load-languages '(sql . t))
    (org-babel-do-load-languages 'org-babel-load-languages org-babel-load-languages)
    (add-to-list 'org-babel-tangle-lang-exts '("sql" . "sql"))
    (add-to-list 'org-src-lang-modes (cons "SQL" 'sql)))
#+end_src

*** SwiftUI

#+begin_src emacs-lisp
  (use-package ob-swiftui
    :after org
    :ensure t
    :config (ob-swiftui-setup))
#+end_src

#+begin_src swiftui :tangle no :results file
  Rectangle()
    .fill(Color.green)
    .frame(maxWidth: .infinity, maxHeight: .infinity)
#+end_src

*** load babel languages

#+begin_src emacs-lisp
  (with-eval-after-load 'org
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((emacs-lisp . t)
       (fsharp . t)
       (http . t)
       (js . t)
       (mermaid . t)
       (shell . t)
       (sql . t)
       (typescript . t))))
#+end_src


** org-yt

#+begin_src org
  [[yt:PeVQwYUxYEg] ]
#+end_src

#+begin_src emacs-lisp
  (use-package org-yt
    :after org
    :quelpa (org-yt :fetcher github :repo "TobiasZawada/org-yt"
                    :commit "40cc1ac76d741055cbefa13860d9f070a7ade001")
    :config
    (setq laat/yt-iframe-format
          (concat "<iframe width=\"440\""
                  " height=\"335\""
                  " src=\"https://www.youtube.com/embed/%s\""
                  " frameborder=\"0\""
                  " allowfullscreen>%s</iframe>")
          laat/yt-markdown-format
          (concat "[![%s](https://img.youtube.com/vi/%s/0.jpg)]"
                  "(https://www.youtube.com/watch?v=%s)"))

    (defun laat/org-yt-export (link description format)
      (pcase format
        (`html (format laat/yt-iframe-format link (or description "")))
        (`latex (format "\href{%s}{%s}" path (or description "video")))
        (`md (format laat/yt-markdown-format (or description "youtube video")link link))))

    (defun laat/org-yt-follow (handle)
      (browse-url (concat "https://www.youtube.com/embed/" handle)))

    (org-link-set-parameters
     "yt"
     :follow #'laat/org-yt-follow
     :export #'laat/org-yt-export))
#+end_src

** Auto-Tangle init.el

#+begin_src emacs-lisp
  (defun laat/org-babel-tangle-config ()
    (when (string-equal (buffer-file-name)
                        (expand-file-name "~/.emacs.d/emacs.org"))
      ;; Dynamic scoping to the rescue
      (let ((org-confirm-babel-evaluate nil))
        (org-babel-tangle))))

  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'laat/org-babel-tangle-config)))
#+end_src

** Orgit

#+begin_src emacs-lisp
  (use-package orgit
    :after org
    :ensure t
    :defer t)
#+end_src

[[orgit:~/.emacs.d][emacs.d git status]]

** PDF

#+begin_src emacs-lisp
  (use-package djvu
    :ensure t
    :defer t)

  (use-package org-noter
    :ensure t
    :defer t
    :after '(org djvu))

  (use-package org-pdftools
    :ensure t
    :hook (org-mode . org-pdftools-setup-link))

  (use-package org-noter-pdftools
    :ensure t
    :defer t
    :after org-noter
    :config
    (with-eval-after-load 'pdf-annot
      (add-hook 'pdf-annot-activate-handler-functions #'org-noter-pdftools-jump-to-note)))
#+end_src

** org-present

#+begin_src emacs-lisp
  (defvar laat-org-present-cookies nil
    "Cookie of the last `face-remap-add-relative'.")
  (make-variable-buffer-local 'laat-org-present-cookies)

  (use-package org-present
    :ensure t
    :after org
    :init
    (defun laat/org-present-start ()
      "Initiate `org-present' mode"

      (setq header-line-format " ")
      ;; (push (face-remap-add-relative 'default
      ;;                                :height 2.0)
      ;;       laat-org-present-cookies)
      (push (face-remap-add-relative 'header-line
                                     :height 4.0
                                     :inherit 'default)
            laat-org-present-cookies)
      (push (face-remap-add-relative 'org-document-title
                                     :height 1.75)
            laat-org-present-cookies)
      (push (face-remap-add-relative 'org-level-1
                                     :height 1.5)
            laat-org-present-cookies)
      (push (face-remap-add-relative 'org-block
                                     :height 0.8
                                     :inherit 'fixed-pitch)
            laat-org-present-cookies)
      (push (face-remap-add-relative 'org-block-begin-line
                                     :height 0.3
                                     :inherit 'fixed-pitch)
            laat-org-present-cookies)
      (push (face-remap-add-relative 'org-block-end-line
                                     :height 0.3
                                     :inherit 'fixed-pitch)
            laat-org-present-cookies)

      (org-present-big)
      (setq visual-fill-column-width 150)
      (setq visual-fill-column-adjust-for-text-scale nil)
      (visual-fill-column-adjust)
      (org-display-inline-images)
      (blink-cursor-mode 0)
      (org-indent-mode 0)
      (org-present-hide-cursor)
      (org-present-read-only)
      (evil-define-key 'normal org-present-mode-keymap
        "h"             'org-present-prev
        (kbd "<left>")  'org-present-prev
        "l"             'org-present-next
        (kbd "<right>") 'org-present-next
        "q"             'org-present-quit
        (kbd "<down>")  'evil-scroll-down
        (kbd "<up>")    'evil-scroll-up)
      (evil-normal-state))

    (defun laat/org-present-end ()
      "Terminate `org-present' mode"
                                          ;(setq-local face-remapping-alist '((default variable-pitch default)))
      ;; (setq-local face-remapping-alist nil)
      (mapc #'face-remap-remove-relative laat-org-present-cookies)
      (setq laat-org-present-cookies nil)
      ;; (kill-local-variable 'visual-fill-column-width)
      (setq visual-fill-column-width 110)
      (setq visual-fill-column-adjust-for-text-scale t)
      (setq header-line-format nil)
      (org-present-small)
      (if (not org-startup-with-inline-images)
          (org-remove-inline-images))
      (org-present-show-cursor)
      (blink-cursor-mode 1)
      (org-indent-mode 1)
      (org-present-read-write))

    (add-hook 'org-present-mode-hook 'laat/org-present-start)
    (add-hook 'org-present-mode-quit-hook 'laat/org-present-end))

#+end_src

* Apps
** elfeed

#+begin_src emacs-lisp
  (use-package elfeed
    :ensure   t
    :commands elfeed
    :general
    (laat/leader-keys
      "fl" 'elfeed)
    :custom
    (elfeed-feeds
     '("https://planet.emacslife.com/atom.xml"
       "http://planet.emacsen.org/atom.xml"
       "http://sachachua.com/blog/category/emacs-news/feed"
       "http://endlessparentheses.com/atom.xml"
       "http://www.masteringemacs.org/feed/"
       "http://emacs-fu.blogspot.com/feeds/posts/default"
       "http://emacsredux.com/atom.xml"
       "http://www.lunaryorn.com/feed.atom"
       )))
#+end_src

** PDF

#+begin_src emacs-lisp
  (use-package pdf-tools
    :ensure t
    :defer t
    :mode (("\\.pdf\\'" . pdf-view-mode))
    :magic ("%PDF" . pdf-view-mode)
    :config
    (pdf-tools-install :no-query))
#+end_src

** Epub reader

#+begin_src emacs-lisp
  (use-package nov
    :ensure t
    :mode ("\\.epub\\'" . nov-mode)
    :custom
    (nov-text-width 80))
#+end_src

** Hackernews

#+begin_src emacs-lisp
    (use-package hackernews
      :ensure t
      :commands hackernews)
#+end_src

* File Management

** Icons

#+begin_src emacs-lisp
  (use-package all-the-icons-dired
    :ensure t
    :after (all-the-icons)
    :hook (dired-mode . all-the-icons-dired-mode))
#+end_src

** Sort folders first OS X

Needs =brew install coreutils=

#+begin_src emacs-lisp
  (when (eq system-type 'darwin)
    (setq insert-directory-program "gls"
          dired-listing-switches "-alBh --group-directories-first"
          dired-use-ls-dired t))
#+end_src

* Terminals
** vterm

#+begin_src emacs-lisp
  (use-package vterm
    :ensure t
    :defer t)
#+end_src

* Startup Timing

#+begin_src emacs-lisp
   (use-package esup
     :init (setq esup-depth 0)
     :ensure t)
#+end_src

#+begin_src emacs-lisp :tangle no
;; Use a hook so the message doesn't get clobbered by other messages.
(add-hook 'emacs-startup-hook
          (lambda ()
            (message "Emacs ready in %s with %d garbage collections."
                     (format "%.2f seconds"
                             (float-time
                              (time-subtract after-init-time before-init-time)))
                     gcs-done)))
#+end_src

#+begin_src shell
  # -q ignores personal Emacs files but loads the site files.
  emacs -q --eval='(message "%s" (emacs-init-time))'

  ;; For macOS users:
  open -n /Applications/Emacs.app --args -q --eval='(message "%s" (emacs-init-time))'
#+end_src


