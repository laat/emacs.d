#    -*- mode: org -*-


Archived entries from file /Users/sigurd/.emacs.d/emacs.org


* LSP
:PROPERTIES:
:ARCHIVE_TIME: 2024-01-11 Thu 14:40
:ARCHIVE_FILE: ~/.emacs.d/emacs.org
:ARCHIVE_OLPATH: Archive
:ARCHIVE_CATEGORY: emacs
:END:

#+begin_src emacs-lisp
  (use-package lsp-mode
    :ensure t
    :commands lsp
    :diminish lsp-lens-mode
    :hook ((clojure-mode . lsp)
           (clojurec-mode . lsp)
           (clojurescript-mode . lsp)
           (lsp-mode . lsp-enable-which-key-integration))
    :init
    (setq lsp-prefer-flymake nil)

    :bind
    (:map lsp-mode-map
          ("s-." . lsp-execute-code-action))
    :custom
    (lsp-ui-doc-show-with-cursor nil))

  (use-package lsp-ui
    :ensure t
    :commands lsp-ui-mode)

* Syntax Checking
:PROPERTIES:
:ARCHIVE_TIME: 2024-01-11 Thu 14:40
:ARCHIVE_FILE: ~/.emacs.d/emacs.org
:ARCHIVE_OLPATH: Archive
:ARCHIVE_CATEGORY: emacs
:END:

#+begin_src emacs-lisp
  (use-package flycheck
    :ensure t
    :diminish
    :custom
    (flycheck-check-syntax-automatically
     '(mode-enabled save)
     "only check on save and enabling flycheck")
    :config
    (setq-default flycheck-disabled-checkers
                  '(javascript-jshint
                    javascript-jscs ))
    :init (global-flycheck-mode))
#+end_src


* Languages
:PROPERTIES:
:ARCHIVE_TIME: 2024-01-11 Thu 14:40
:ARCHIVE_FILE: ~/.emacs.d/emacs.org
:ARCHIVE_OLPATH: Archive
:ARCHIVE_CATEGORY: emacs
:END:

** Lispish
*** lispy

#+begin_src emacs-lisp
  (use-package lispy
    :ensure t
    :defer t
    :diminish lispy-mode
    :hook ((clojure-mode cider-repl-mode emacs-lisp-mode lisp-mode) .
           lispy-mode)
    :custom
    (lispy-key-theme '(lispy c-digits))
    (lispy-compat '(edebug cider magit-blame-mode))
    (lispy-eval-display-style 'overlay))
#+end_src

*** lispyville

#+begin_src emacs-lisp
  (use-package lispyville
    :ensure t
    :after lispy
    :diminish lispyville-mode
    :hook ((clojure-mode cider-repl-mode emacs-lisp-mode lisp-mode lispy-mode) .
           lispyville-mode)
    :general
    (laat/leader-keys
      :states 'normal
      :keymaps 'lispyville-mode-map
      "cc" '(lispyville-comment-or-uncomment-line :which-key "comment line"))
    (laat/leader-keys
      :states 'visual
      :keymaps 'lispyville-mode-map
      "cc" '(lispyville-comment-or-uncomment-line :which-key "comment line"))
    :config
    (lispyville-set-key-theme
     '(operators
       c-w
       additional
       additional-movement)))
#+end_src


*** Parinfer

#+begin_src emacs-lisp
  (use-package parinfer-rust-mode
    :disabled
    :ensure t
    :diminish parinfer-rust-mode
    :hook emacs-lisp-mode scheme-mode common-lisp-mode
    :init
    (setq parinfer-rust-auto-download t)
    (setq parinfer-rust-preferred-mode 'smart)
    (laat/leader-keys
      "tp" '(parinfer-rust-toggle-paren-mode :which-key "toggle parinfer mode")))
#+end_src

*** Aggressive indent

#+begin_src emacs-lisp
  (use-package aggressive-indent
    :ensure t
    :diminish
    :commands aggressive-indent-mode
    :hook ((emacs-lisp-mode lisp-mode clojure-mode) . aggressive-indent-mode))
#+end_src

** Dockerfile

#+begin_src emacs-lisp
  (use-package dockerfile-mode
    :mode "Dockerfile\\'"
    :ensure t)
#+end_src

** Docker Compose

#+begin_src emacs-lisp
(use-package docker-compose-mode
  :mode "docker-compose[^/]*\\.yml\\'"
  :ensure t)
#+end_src

** C#

#+begin_src emacs-lisp
  (use-package csharp-mode
    :mode "\\.cs\\'"
    :ensure t)
#+end_src

=M-x lsp-install-server RET csharp RET=

** F#

#+begin_src emacs-lisp
  (use-package fsharp-mode
    :defer t
    :ensure t
    :custom
    (inferior-fsharp-program "dotnet fsi --readline-"))
#+end_src

*** LSP

=M-x lsp-install-server RET fsac RET=

** Clojure

#+begin_src emacs-lisp
  (use-package clojure-mode
    :ensure t
    :mode (("\\.clj\\'" . clojure-mode)
           ("\\.edn\\'" . clojure-mode))
    :config
    (setq clojure-toplevel-inside-comment-form t))
#+end_src

#+begin_src emacs-lisp
  (use-package clojure-snippets
    :ensure t)
#+end_src

#+begin_src emacs-lisp
  (use-package cider
    :ensure t
    :hook ((clojure-mode) . cider-mode)
    :config
    (setq
     ;; cider-show-error-buffer nil
     cider-repl-history-file (concat user-emacs-directory "cider-history")
     cider-repl-display-help-banner nil
     cider-font-lock-dynamically nil
     ))
#+end_src

** JSON

#+begin_src emacs-lisp
    (use-package json-mode
      :mode "\\.json\\'"
      :ensure t)
    (use-package counsel-jq
      :ensure t
      :after counsel
      :commands (counsel-jq))
#+end_src

*** LSP

M-x lsp-install-server RET json-ls RET

or

#+begin_src shell
  npm i -g vscode-json-languageserver
#+end_src

** YAML

#+begin_src emacs-lisp
  (use-package yaml-mode
    :ensure t
    :mode ("\\.yaml\\'" "\\.yml\\'"))
#+end_src

*** LSP

=M-x lsp-install-server RET yamlls RET=

** Markdown

#+begin_src emacs-lisp
  (use-package markdown-mode
    :ensure t
    :commands (markdown-mode gfm-mode)
    :mode (("README\\.md\\'" . gfm-mode)
           ("\\.md\\'" . markdown-mode)
           ("\\.markdown\\'" . markdown-mode))
    :init (setq markdown-command "multimarkdown"))
#+end_src

** JavaScript

*** paranthesis
#+begin_src emacs-lisp
  (add-hook 'js-mode-hook 'electric-pair-local-mode)
#+end_src
*** jest

#+begin_src emacs-lisp
  (use-package jest
    :ensure t
    :after (js-mode)
    :hook (js-mode . jest-minor-mode))
#+end_src

*** Npm

#+begin_src emacs-lisp
  (use-package npm
    :ensure t
    :commands
    (npm-update
     npm-run
     npm-menu
     npm-init
     npm-install-menu
     npm-mode
     npm))
#+end_src

=M-x npm=

*** node_modeules binaries

Need it get flycheck to find local binaries.

#+begin_src emacs-lisp
  ;; (use-package add-node-modules-path
  ;;   :ensure t
  ;;   :hook (web-mode js-mode typescript-mode)
  ;;   :custom (add-node-modules-path-command '("pnpm bin" "pnpm bin -w")))
#+end_src

** TypeScript
*** basic

#+begin_src emacs-lisp
  (use-package typescript-mode
    :ensure t
    :defer t)
#+end_src

*** LSP

#+begin_src shell :async :tangle no
  npm i -g typescript-language-server
  npm i -g typescript
#+end_src

** SSH

#+begin_src emacs-lisp
  (use-package ssh-config-mode
    :ensure t
    :mode (("/\\.ssh/config\\'"     . ssh-config-mode)
           ("/sshd?_config\\'"      . ssh-config-mode)
           ("/known_hosts\\'"       . ssh-known-hosts-mode)
           ("/authorized_keys2?\\'" . ssh-authorized-keys-mode)))
#+end_src

** SQL

#+begin_src emacs-lisp
  (use-package ejc-sql
    :ensure t
    :defer 2
    :custom
    (clomacs-httpd-default-port 8191)
    (ejc-jdbc-drivers
     '("mysql" [mysql/mysql-connector-java "8.0.22"]
       "oracle" [com.oracle.jdbc/ojdbc8 "19.8.0.0"])))

  (use-package sql-indent
    :ensure t
    :diminish sqlind-minor-mode
    :hook (sql-mode . sqlind-minor-mode))

  (use-package sqlup-mode
    :ensure t
    :diminish sqlup-mode
    :hook (sql-mode . sqlup-mode))
#+end_src


* Docker
:PROPERTIES:
:ARCHIVE_TIME: 2024-01-11 Thu 14:40
:ARCHIVE_FILE: ~/.emacs.d/emacs.org
:ARCHIVE_OLPATH: Archive
:ARCHIVE_CATEGORY: emacs
:END:

#+begin_src emacs-lisp
  (use-package docker
    :ensure t
    :bind ("C-c d" . docker))
#+end_src


* Ideas
:PROPERTIES:
:ARCHIVE_TIME: 2024-01-11 Thu 14:40
:ARCHIVE_FILE: ~/.emacs.d/emacs.org
:ARCHIVE_OLPATH: Archive
:ARCHIVE_CATEGORY: emacs
:END:
** https://github.com/lepisma/rogue
** https://github.com/deb0ch/emacs-winum
** https://github.com/purcell/elisp-slime-nav
** https://melpa.org/#/ytdl

* diff-hl
:PROPERTIES:
:ARCHIVE_TIME: 2024-01-11 Thu 16:54
:ARCHIVE_FILE: ~/.emacs.d/emacs.org
:ARCHIVE_OLPATH: Development/Git
:ARCHIVE_CATEGORY: emacs
:END:

#+begin_src emacs-lisp
  (use-package diff-hl
    :ensure t
    :hook (dired-mode . diff-hl-dired-mode-unless-remote)
    :hook (magit-post-refresh . diff-hl-magit-post-refresh)
    :config
    ;; use margin instead of fringe
    (diff-hl-margin-mode))
#+end_src


* Emmet
:PROPERTIES:
:ARCHIVE_TIME: 2024-01-11 Thu 20:33
:ARCHIVE_FILE: ~/.emacs.d/emacs.org
:ARCHIVE_OLPATH: Development/Basic
:ARCHIVE_CATEGORY: emacs
:END:

#+begin_src emacs-lisp
  (use-package emmet-mode
    :ensure t
    :diminish
    :custom
    (emmet-insert-flash-time 0.001))
#+end_src

* apheleia
:PROPERTIES:
:ARCHIVE_TIME: 2024-01-11 Thu 21:35
:ARCHIVE_FILE: ~/.emacs.d/emacs.org
:ARCHIVE_OLPATH: Development/Basic
:ARCHIVE_CATEGORY: emacs
:END:
#+begin_src emacs-lisp
  (use-package apheleia
    :ensure t
    :defer t
    :hook (prog-mode . apheleia-mode)
    :config
    (apheleia-global-mode t))
#+end_src


* Format
:PROPERTIES:
:ARCHIVE_TIME: 2024-01-11 Thu 21:37
:ARCHIVE_FILE: ~/.emacs.d/emacs.org
:ARCHIVE_OLPATH: Development/Basic
:ARCHIVE_CATEGORY: emacs
:END:
#+begin_src emacs-lisp
  (use-package format-all
    :ensure t
    :commands format-all-mode
    :hook (prog-mode . format-all-mode))
#+end_src


* Color Theme
:PROPERTIES:
:ARCHIVE_TIME: 2024-01-11 Thu 22:08
:ARCHIVE_FILE: ~/.emacs.d/emacs.org
:ARCHIVE_OLPATH: UI Configuration
:ARCHIVE_CATEGORY: emacs
:END:

#+begin_src emacs-lisp
  (use-package doom-themes
    :ensure t
    :init (load-theme 'doom-one t))
#+end_src


* Color Theme
:PROPERTIES:
:ARCHIVE_TIME: 2024-01-11 Thu 22:25
:ARCHIVE_FILE: ~/.emacs.d/emacs.org
:ARCHIVE_OLPATH: UI Configuration
:ARCHIVE_CATEGORY: emacs
:END:

#+begin_src emacs-lisp
  (use-package modus-themes
    :ensure t
    :config
    (require-theme 'modus-themes)
    (load-theme 'modus-vivendi))
#+end_src


* org-present
:PROPERTIES:
:ARCHIVE_TIME: 2024-01-12 Fri 11:57
:ARCHIVE_FILE: ~/.emacs.d/emacs.org
:ARCHIVE_OLPATH: Org
:ARCHIVE_CATEGORY: emacs
:END:

#+begin_src emacs-lisp
  (defun laat/org-present-start ()
    "Configure \"org-present-mode\"."
    (setq-local face-remapping-alist
                '((default (:height 1.5) variable-pitch)
                  (header-line (:height 4.0) variable-pitch)
                  (org-document-title (:height 1.75) org-document-title)
                  (org-code (:height 1.55) org-code)
                  (org-verbatim (:height 1.55) org-verbatim)
                  (org-block (:height 1.25) org-block)
                  (org-block-begin-line (:height 0.7) org-block)))
    (setq-local org-hide-emphasis-markers t))

  (defun laat/org-present-end ()
    "Reset confuration of \"org-present-mode\"."
    (setq-local face-remapping-alist nil)
    (setq-local org-hide-emphasis-markers nil))

  ;; (set-face-attribute 'default nil :font "JetBrains Mono" :weight 'light :height 180)
  ;; (set-face-attribute 'fixed-pitch nil :font "JetBrains Mono" :weight 'light :height 190)
  ;; (set-face-attribute 'variable-pitch nil :font "Iosevka Aile" :weight 'light :height 1.3)
  ;; ;; Make the document title a bit bigger
  ;; (set-face-attribute 'org-document-title nil :font "Iosevka Aile" :weight 'bold :height 1.3)

  ;; Make sure certain org faces use the fixed-pitch face when variable-pitch-mode is on
  ;; (set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
  ;; (set-face-attribute 'org-table nil :inherit 'fixed-pitch)
  ;; (set-face-attribute 'org-formula nil :inherit 'fixed-pitch)
  ;; (set-face-attribute 'org-code nil :inherit '(shadow fixed-pitch))
  ;; (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
  ;; (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
  ;; (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
  ;; (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch)

  (use-package org-present
    :ensure t
    :after org
    :init
    (add-hook 'org-present-mode-hook 'laat/org-present-start)
    (add-hook 'org-present-mode-quit-hook 'laat/org-present-end))
#+end_src

=hello=

* Treemacs
:PROPERTIES:
:ARCHIVE_TIME: 2024-01-12 Fri 12:28
:ARCHIVE_FILE: ~/.emacs.d/emacs.org
:ARCHIVE_OLPATH: UI Configuration
:ARCHIVE_CATEGORY: emacs
:END:

#+begin_src emacs-lisp
  (use-package treemacs
    :ensure t
    :general
    ("C-c t" 'treemacs))

  (use-package treemacs-evil
    :ensure t
    :after (treemacs evil))

  (use-package treemacs-projectile
    :ensure t
    :after (treemacs projectile))

  (use-package treemacs-magit
    :ensure t
    :after (treemacs magit))

  (use-package treemacs-all-the-icons
    :ensure t
    :after (treemacs all-the-icons))

#+end_src


* Color Theme
:PROPERTIES:
:ARCHIVE_TIME: 2024-01-12 Fri 14:46
:ARCHIVE_FILE: ~/.emacs.d/emacs.org
:ARCHIVE_OLPATH: UI Configuration
:ARCHIVE_CATEGORY: emacs
:END:

#+begin_src emacs-lisp
  (use-package doom-themes
    :ensure t
    :config
    (load-theme 'doom-one t)
    (doom-themes-org-config))
#+end_src


* Swift
:PROPERTIES:
:ARCHIVE_TIME: 2024-01-12 Fri 16:38
:ARCHIVE_FILE: ~/.emacs.d/emacs.org
:ARCHIVE_OLPATH: Development/Languages
:ARCHIVE_CATEGORY: emacs
:END:

#+begin_src emacs-lisp
  (use-package swift-mode
    :ensure t
    :defer t
    :config
    (add-to-list 'eglot-server-programs
                 '(swift-mode . ("xcrun" "sourcekit-lsp"))))
#+end_src
